<?php

namespace Tests\Feature;

use App\Models\City;
use App\Models\Country;
use App\Models\File;
use App\Models\TravelAgent;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Arr;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Artisan;
use Tests\TestCase;

class TravelAgentTest extends TestCase
{
    use RefreshDatabase;

    private $admin;
    private $employee_read;
    private $employee_write;
    private $created_count = 0;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->index_route = route('travel-agents.index');
        $this->create_route = route('travel-agents.create');
        $this->store_route = route('travel-agents.store');
        $this->edit_route = route('travel-agents.edit', ['travel_agent' => 1]);
        $this->update_route = route('travel-agents.update', ['travel_agent' => 1]);

        Artisan::call('testlogs:clear');
        $this->admin = $this->createAdminEmployee();
        $this->employee_write = $this->createEmployeeWithPermission(TravelAgent::PERMISSION_NAME, 'write');
        $this->employee_read = $this->createEmployeeWithPermission(TravelAgent::PERMISSION_NAME, 'read');
    }

    /** @test */
    public function a_guest_is_redirected_to_login()
    {
        $this->get($this->index_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_is_forbidden()
    {
        $this->actingAs($this->employee_write->user)->get($this->index_route)->assertForbidden();
    }

    /**
     *
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_travel_agents_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $count = 3;
        $travel_agents = factory(TravelAgent::class, $count)->create();
        $response = $this->actingAs($auth)->get($this->index_route);

        $response->assertOk();
        $travel_agents_from_view = $this->getDataFromDatatableResponse($response);
        $this->assertNotNull($travel_agents_from_view);
        $this->assertCount($count, $travel_agents_from_view);
        $this->assertCount($count, TravelAgent::all());
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_paginate_travel_agents($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $all_count = 10;
        $per_page = 3;
        $deps = factory(TravelAgent::class, $all_count)->create();

        $next_page = '';
        $remaining = $all_count;
        $ids = [];
        for ($i = 0; $i < $all_count; $i += $per_page) {
            $url_query = '?length=' . $per_page . '&start=' . $i;
            $url = $this->index_route;
            $url .= $url_query;
            $response = $this->actingAs($auth)->get($url);
            $response->assertOk();
            $travel_agents_from_view = $this->getDataFromDatatableResponse($response);
            //make sure that no raw is sent twice when paginating
            $diff = (array_diff($ids, $travel_agents_from_view->pluck('id')->toArray()));
            $this->assertEquals($diff, $ids);
            $ids = array_merge($ids, $travel_agents_from_view->pluck('id')->toArray());
            $this->assertNotNull($travel_agents_from_view);
            //assert that we got the expected number of raws
            $count_should_be = $remaining >= $per_page ? $per_page : $remaining;
            $remaining -= count($travel_agents_from_view);
            $this->assertCount($count_should_be, $travel_agents_from_view);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_search_travel_agents_by_name($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $can_search_by = (new TravelAgent())->can_search_by;
        $can_search_by = array_map(function ($item) {
            return str_replace('travel_agents.', '', $item);
        }, $can_search_by);
        for ($i = 0; $i < 13; $i++) {
            $travel_agents = factory(TravelAgent::class, 20)->create();

            $rand_dep = $travel_agents->toArray()[rand(0, 9)];
            $rand_name = $rand_dep['name'];
            $rand_word = Arr::random(explode(' ', $rand_name));
            $url_query = '?search[value]=' . $rand_word;

            $response = $this->actingAs($auth)->get($this->index_route . $url_query);
            $response->assertOk();
            $travel_agents_from_view = $this->getDataFromDatatableResponse($response);
            $this->assertNotNull($travel_agents_from_view);
            $this->assertGreaterThan(0, count($travel_agents_from_view));
            foreach ($travel_agents_from_view as $agent) {
                $found = 0;
                foreach ($can_search_by as $key) {
                    if (stripos($key, '.') !== false) {
                        $parts = explode('.', $key);
                        if (stripos($agent->{$parts[0]}->{$parts[1]}, $rand_word) !== false) {
                            $found++;
                        }
                    } elseif (stripos($agent->{$key}, $rand_word) !== false) {
                        $found++;
                    }
                }
                $this->assertGreaterThan(0, $found);
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_sort_travel_agents($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        for ($z = 0; $z < 10; $z++) {
            $all_count = 10;
            $travel_agents = factory(TravelAgent::class, $all_count)->create();
            $param = 'name';
            $url_query = '?order[0][dir]=asc&order[0][column]=0&columns[0][data]=' . $param;

            $response = $this->actingAs($auth)->get($this->index_route . $url_query);
            $response->assertOk();
            $travel_agents_from_view = $this->getDataFromDatatableResponse($response);
            $this->assertNotNull($travel_agents_from_view);
            $this->assertGreaterThan(0, count($travel_agents_from_view));

            $emps = $travel_agents_from_view;
            for ($i = 0; $i < count($emps); $i++) {
                if ($i > 0) {
                    $this->greaterThanOrEqual($emps->get($i - 1)->{$param}, $emps->get($i)->{$param});
                }
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_delete_travel_agent($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $travel_agent = TravelAgent::first();

        $response = $this->actingAs($auth)->delete($travel_agent->deletePath());
        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $this->assertNull(TravelAgent::find($travel_agent->id));
        $response->assertSessionHas('success');
        $this->assertEquals(0, File::count());
    }

    /** @test */
    public function a_guest_cannot_delete_travel_agent()
    {
        $travel_agent = factory(TravelAgent::class)->create();
        $this->delete($travel_agent->deletePath())->assertRedirect(route('login'));
        $this->assertNotNull(TravelAgent::find($travel_agent->id));
    }

    /** @test */
    public function user_without_permission_cannot_delete_travel_agent()
    {
        $travel_agent = factory(TravelAgent::class)->create();
        $this->actingAs($this->employee_read->user)->delete($travel_agent->deletePath())->assertForbidden();
        $this->assertNotNull(TravelAgent::find($travel_agent->id));
    }

    /** @test */
    public function a_guest_cannot_see_add_travel_agent_page()
    {
        $this->get($this->create_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_add_travel_agent_page()
    {
        $this->actingAs($this->employee_read->user)->get($this->create_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_add_travel_agent_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $response = $this->actingAs($auth)->get($this->create_route);
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('travel-agents.create');
        $countries = $this->getDataFromResponse($response, 'countries');
        $cities = $this->getDataFromResponse($response, 'cities');
        $this->assertNotNull($countries);
        $this->assertNotNull($cities);
    }

    /** @test */
    public function a_guest_cannot_add_travel_agent()
    {
        $this->post($this->store_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_add_travel_agent()
    {
        $this->actingAs($this->employee_read->user)->post($this->store_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_add_travel_agent($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertEquals($this->created_count + 1, TravelAgent::count());

        $travel_agent = TravelAgent::find($this->created_count + 1);
        $this->assertData($travel_agent, $data);
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_travel_agent_with_invalid_name($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['name' => '']);
        $data_sets[] = array_merge($data, ['name' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('name');
            $this->assertCount($this->created_count, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['name', 'contract']));
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_travel_agent_with_invalid_phone($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['phone' => '']);
        $data_sets[] = array_merge($data, ['phone' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('phone');
            $this->assertCount($this->created_count, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['phone', 'contract']));
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_travel_agent_with_invalid_email($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['email' => '']);
        $data_sets[] = array_merge($data, ['email' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('email');
            $this->assertCount($this->created_count, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['email', 'contract']));
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_travel_agent_with_invalid_contact_name($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['contact_name' => '']);
        $data_sets[] = array_merge($data, ['contact_name' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('contact_name');
            $this->assertCount($this->created_count, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['contact_name', 'contract']));
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_travel_agent_with_invalid_contact_phone($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['contact_phone' => '']);
        $data_sets[] = array_merge($data, ['contact_phone' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('contact_phone');
            $this->assertCount($this->created_count, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['contact_phone', 'contract']));
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_travel_agent_with_invalid_contact_email($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['contact_email' => '']);
        $data_sets[] = array_merge($data, ['contact_email' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('contact_email');
            $this->assertCount($this->created_count, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['contact_email', 'contract']));
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_travel_agent_with_invalid_country($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['country_id' => '']);
        $data_sets[] = array_merge($data, ['country_id' => 'ahm']);
        $data_sets[] = array_merge($data, ['country_id' => 900000]);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('country_id');
            $this->assertCount($this->created_count, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['country_id', 'contract']));
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_travel_agent_with_invalid_city($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['city_id' => '']);
        $data_sets[] = array_merge($data, ['city_id' => 'ahm']);
        $data_sets[] = array_merge($data, ['city_id' => 900000]);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('city_id');
            $this->assertCount($this->created_count, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['city_id', 'contract']));
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_travel_agent_with_invalid_contract($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['contract' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('contract');
            $this->assertCount($this->created_count, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['contract']));
        }
    }

    /** @test */
    public function a_guest_cannot_see_edit_travel_Agent_page()
    {
        $travel_agent = factory(TravelAgent::class)->create();
        $this->get($travel_agent->editPath())->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_edit_employee_page()
    {
        $travel_agent = factory(TravelAgent::class)->create();
        $this->actingAs($this->employee_read->user)->get($travel_agent->editPath())->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_edit_travel_agent_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $travel_agent = factory(TravelAgent::class)->create();
        $response = $this->actingAs($auth)->get($travel_agent->editPath());
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('travel-agents.edit');
        $travel_agent_from_view = $this->getDataFromResponse($response, 'travel_agent');
        $countries = $this->getDataFromResponse($response, 'countries');
        $cities = $this->getDataFromResponse($response, 'cities');
        $this->assertNotNull($countries);
        $this->assertNotNull($cities);
        $this->assertNotNull($travel_agent_from_view);
        $this->assertEquals($travel_agent->id, $travel_agent_from_view->id);
    }

    /** @test */
    public function a_guest_cannot_edit_travel_agent()
    {
        $travel_agent = factory(TravelAgent::class)->create();
        $this->patch($this->update_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_edit_travel_agent()
    {
        $travel_agent = factory(TravelAgent::class)->create();
        $this->actingAs($this->employee_read->user)->patch($this->update_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_edit_travel_agent($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $travel_agent = factory(TravelAgent::class)->create();

        $data = $this->update_data();
        $response = $this->actingAs($auth)->patch($this->update_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertCount($this->created_count + 1, TravelAgent::all());

        $travel_agent->refresh();
        $this->assertData($travel_agent, $data);
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_travel_agent_with_invalid_name($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $travel_agent = factory(TravelAgent::class)->create();

        $data = $this->data();
        $data_sets[] = array_merge($data, ['name' => '']);
        $data_sets[] = array_merge($data, ['name' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('name');
            $this->assertCount($this->created_count + 1, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['name', 'contract']));
            $old_data = Arr::except($travel_agent->toArray(), ['created_at', 'updated_at', 'deleted_at']);
            $this->assertData($travel_agent->refresh(), $old_data);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_travel_agent_with_invalid_email($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $travel_agent = factory(TravelAgent::class)->create();

        $data = $this->data();
        $data_sets[] = array_merge($data, ['email' => '']);
        $data_sets[] = array_merge($data, ['email' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('email');
            $this->assertCount($this->created_count + 1, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['email', 'contract']));
            $old_data = Arr::except($travel_agent->toArray(), ['created_at', 'updated_at', 'deleted_at']);
            $this->assertData($travel_agent->refresh(), $old_data);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_travel_agent_with_invalid_phone($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $travel_agent = factory(TravelAgent::class)->create();

        $data = $this->data();
        $data_sets[] = array_merge($data, ['phone' => '']);
        $data_sets[] = array_merge($data, ['phone' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('phone');
            $this->assertCount($this->created_count + 1, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['phone', 'contract']));
            $old_data = Arr::except($travel_agent->toArray(), ['created_at', 'updated_at', 'deleted_at']);
            $this->assertData($travel_agent->refresh(), $old_data);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_travel_agent_with_invalid_contact_name($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $travel_agent = factory(TravelAgent::class)->create();

        $data = $this->data();
        $data_sets[] = array_merge($data, ['contact_name' => '']);
        $data_sets[] = array_merge($data, ['contact_name' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('contact_name');
            $this->assertCount($this->created_count + 1, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['contact_name', 'contract']));
            $old_data = Arr::except($travel_agent->toArray(), ['created_at', 'updated_at', 'deleted_at']);
            $this->assertData($travel_agent->refresh(), $old_data);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_travel_agent_with_invalid_contact_email($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $travel_agent = factory(TravelAgent::class)->create();

        $data = $this->data();
        $data_sets[] = array_merge($data, ['contact_email' => '']);
        $data_sets[] = array_merge($data, ['contact_email' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('contact_email');
            $this->assertCount($this->created_count + 1, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['contact_email', 'contract']));
            $old_data = Arr::except($travel_agent->toArray(), ['created_at', 'updated_at', 'deleted_at']);
            $this->assertData($travel_agent->refresh(), $old_data);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_travel_agent_with_invalid_contact_phone($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $travel_agent = factory(TravelAgent::class)->create();

        $data = $this->data();
        $data_sets[] = array_merge($data, ['contact_phone' => '']);
        $data_sets[] = array_merge($data, ['contact_phone' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('contact_phone');
            $this->assertCount($this->created_count + 1, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['contact_phone', 'contract']));
            $old_data = Arr::except($travel_agent->toArray(), ['created_at', 'updated_at', 'deleted_at']);
            $this->assertData($travel_agent->refresh(), $old_data);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_travel_agent_with_invalid_country($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $travel_agent = factory(TravelAgent::class)->create();

        $data = $this->data();
        $data_sets[] = array_merge($data, ['country_id' => '']);
        $data_sets[] = array_merge($data, ['country_id' => 'ahm']);
        $data_sets[] = array_merge($data, ['country_id' => 999999]);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('country_id');
            $this->assertCount($this->created_count + 1, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['country_id', 'contract']));
            $old_data = Arr::except($travel_agent->toArray(), ['created_at', 'updated_at', 'deleted_at']);
            $this->assertData($travel_agent->refresh(), $old_data);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_travel_agent_with_invalid_city($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $travel_agent = factory(TravelAgent::class)->create();

        $data = $this->data();
        $data_sets[] = array_merge($data, ['city_id' => '']);
        $data_sets[] = array_merge($data, ['city_id' => 'ahm']);
        $data_sets[] = array_merge($data, ['city_id' => 999999]);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('city_id');
            $this->assertCount($this->created_count + 1, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['city_id', 'contract']));
            $old_data = Arr::except($travel_agent->toArray(), ['created_at', 'updated_at', 'deleted_at']);
            $this->assertData($travel_agent->refresh(), $old_data);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_travel_agent_with_invalid_contract($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $travel_agent = factory(TravelAgent::class)->create();

        $data = $this->data();
        $response = $this->actingAs($auth)->patch($this->update_route, $data);
        $travel_agent->refresh();
        $old_contract = $travel_agent->file;

        $data_sets[] = array_merge($data, ['contract' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('contract');
            $this->assertCount($this->created_count + 1, TravelAgent::all());
            $this->assertOldInput(Arr::except($data_set, ['contract']));
            $old_data = Arr::except($travel_agent->toArray(), ['file', 'created_at', 'updated_at', 'deleted_at']);
            $this->assertData($travel_agent->refresh(), $old_data);
            $this->assertEquals($travel_agent->id, $old_contract->fileable_id);
            $this->assertEquals(1, File::first()->id);
        }
    }


    private function data()
    {
        $data = factory(TravelAgent::class)->make()->toArray();
        $data['contract'] = UploadedFile::fake()->create('contractFileTravelAgent.pdf', 1);
        return $data;
    }

    private function update_data()
    {
        return $this->data();
    }

    private function assertData($travel_agent, $data)
    {
        foreach ($data as $key => $value) {
            if ($key == 'contract') {
                $this->assertEquals(1, File::count());
                $this->assertEquals($travel_agent->id, File::first()->fileable_id);
            } else {
                $this->assertEquals($value, $travel_agent->{$key});
            }
        }
    }
}
