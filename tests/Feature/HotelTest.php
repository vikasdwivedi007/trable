<?php

namespace Tests\Feature;

use App\Models\City;
use App\Models\File;
use App\Models\Hotel;
use App\Models\Info;
use App\Models\Room;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Artisan;
use Tests\TestCase;

class HotelTest extends TestCase
{
    use RefreshDatabase;

    private $admin;
    private $employee_read;
    private $employee_write;
    private $created_count = 0;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->index_route = route('hotels.index');
        $this->create_route = route('hotels.create');
        $this->store_route = route('hotels.store');
        $this->edit_route = route('hotels.edit', ['hotel'=>1]);
        $this->update_route = route('hotels.update', ['hotel'=>1]);

        Artisan::call('testlogs:clear');
        $this->admin = $this->createAdminEmployee();
        $this->employee_write = $this->createEmployeeWithPermission(Hotel::PERMISSION_NAME, 'write');
        $this->employee_read = $this->createEmployeeWithPermission(Hotel::PERMISSION_NAME, 'read');
    }

    /** @test */
    public function a_guest_is_redirected_to_login()
    {
        $this->get($this->index_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_is_forbidden()
    {
        $this->actingAs($this->employee_write->user)->get($this->index_route)->assertForbidden();
    }

    /**
     *
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_hotels_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $count = 3;
        $rooms = factory(Room::class, $count)->create();
        $response = $this->actingAs($auth)->get($this->index_route);

        $response->assertOk();
        $response->assertViewIs('hotels.index');

        $rooms_from_view = $this->getDataFromResponse($response, 'rooms');
        $this->assertNotNull($rooms_from_view);
        $this->assertCount($count, $rooms_from_view);
        $this->assertCount($count, Room::all());
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_paginate_hotels($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $all_count = 10;
        $per_page = 3;
        $rooms = factory(Room::class, $all_count)->create();

        $next_page = '';
        $remaining = $all_count;
        $ids = [];
        for ($i=1;$i<=$all_count;$i+=$per_page){
            $url_query = 'per_page='.$per_page;
            $url = $this->index_route;
            if($next_page){
                $url = $next_page;
                $url_query = '&'.$url_query;
            }else{
                $url_query = '?'.$url_query;
            }
            $url .= $url_query;
            $response = $this->actingAs($auth)->get($url);

            $response->assertOk();
            $response->assertViewIs('hotels.index');

            $rooms_from_view = $this->getDataFromResponse($response, 'rooms');

            //make sure that no raw is sent twice when paginating
            $diff = (array_diff($ids, $rooms_from_view->pluck('id')->toArray()));
            $this->assertEquals($diff, $ids);
            $ids = array_merge($ids, $rooms_from_view->pluck('id')->toArray());

            $this->assertNotNull($rooms_from_view);
            $next_page = $rooms_from_view->toArray()['next_page_url'];

            //assert that we got the expected number of raws
            $count_should_be = $remaining >= $per_page ? $per_page : $remaining;
            $remaining -= count($rooms_from_view);
            $this->assertCount($count_should_be, $rooms_from_view);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_search_rooms_by_name_and_hotel_name($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $loops = 13;
        for ($i=0;$i<$loops;$i++){
            $rooms = factory(Room::class, 20)->create()->load('hotel');

            $rand_room = $rooms->toArray()[rand(0,9)];
            if($i<=$loops/2){
                $rand_name = $rand_room['name'];
                $rand_word = Arr::random(explode(' ', $rand_name));
                $url_query = '?filter_by=name&filter_q='.$rand_word;
            }else{
                $rand_name = $rand_room['hotel']['name'];
                $rand_word = Arr::random(explode(' ', $rand_name));
                $url_query = '?filter_by_r=hotel.name&filter_q_r=' . $rand_word;
            }

            $response = $this->actingAs($auth)->get($this->index_route.$url_query);

            $response->assertOk();
            $response->assertViewIs('hotels.index');

            $rooms_from_view = $this->getDataFromResponse($response, 'rooms');
            $this->assertNotNull($rooms_from_view);
            $this->assertGreaterThan(0, count($rooms_from_view));

            //assert searched name exists in the result
            foreach($rooms_from_view as $room){
                if($i<=$loops/2) {
                    $this->assertStringContainsStringIgnoringCase($rand_word, $room->name);
                }else{
                    $this->assertStringContainsStringIgnoringCase($rand_word, $room->hotel->name);
                }
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_sort_rooms($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        for ($z=0;$z<10;$z++){
            $all_count = 10;
            $room = factory(Room::class, $all_count)->create();
            $param = 'name';
            $order = 'ASC';
            $url_query = '?order_by='.$param.'&order='.$order;

            $response = $this->actingAs($auth)->get($this->index_route.$url_query);
            $response->assertOk();
            $response->assertViewIs('hotels.index');

            $rooms_from_view = $this->getDataFromResponse($response, 'rooms');
            $this->assertNotNull($rooms_from_view);
            $this->assertGreaterThan(0, count($rooms_from_view));

            $rooms = $rooms_from_view->toArray()['data'];
            for ($i=0;$i<count($rooms);$i++){
                if($i > 0){
                    if($order == 'ASC'){
                        $this->lessThanOrEqual($rooms[$i-1][$param], $rooms[$i][$param]);
                    }else{
                        $this->greaterThanOrEqual($rooms[$i-1][$param], $rooms[$i][$param]);
                    }
                }
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_sort_rooms_by_hotel_name($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        for ($z = 0; $z < 10; $z++) {
            $all_count = 10;
            $rooms = factory(Room::class, $all_count)->create();
            $param = 'name';
            $url_query = '?order_by_r=hotels.' . $param;

            $response = $this->actingAs($auth)->get(route('hotels.sort') . $url_query);
            $response->assertOk();
            $response->assertViewIs('hotels.index');

            $rooms_from_view = $this->getDataFromResponse($response, 'rooms');
            $this->assertNotNull($rooms_from_view);
            $this->assertGreaterThan(0, count($rooms_from_view));

            $emps = $rooms_from_view->toArray()['data'];
            for ($i = 0; $i < count($emps); $i++) {
                if ($i > 0) {
                    $this->greaterThanOrEqual($emps[$i - 1]['hotel'][$param], $emps[$i]['hotel'][$param]);
                }
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_delete_hotel($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $hotel = Hotel::first();

        $response = $this->actingAs($auth)->delete($hotel->deletePath());
        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $this->assertNull(Hotel::find($hotel->id));
        $response->assertSessionHas('success');
        $this->assertEquals(0, File::count());
        $this->assertEquals(0, Room::count());
    }

    /** @test */
    public function a_guest_cannot_delete_hotel()
    {
        $hotel = factory(Hotel::class)->create();
        $this->delete($hotel->deletePath())->assertRedirect(route('login'));
        $this->assertNotNull(Hotel::find($hotel->id));
    }

    /** @test */
    public function user_without_permission_cannot_delete_hotel()
    {
        $hotel = factory(Hotel::class)->create();
        $this->actingAs($this->employee_read->user)->delete($hotel->deletePath())->assertForbidden();
        $this->assertNotNull(Hotel::find($hotel->id));
    }

    /** @test */
    public function a_guest_cannot_see_add_hotel_page()
    {
        $this->get($this->create_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_add_hotel_page()
    {
        $this->actingAs($this->employee_read->user)->get($this->create_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_add_hotel_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $response = $this->actingAs($auth)->get($this->create_route);
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('hotels.create');
        $cities = $this->getDataFromResponse($response, 'cities');
        $this->assertNotNull($cities);
    }

    /** @test */
    public function a_guest_cannot_add_hotel()
    {
        $this->post($this->store_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_add_hotel()
    {
        $this->actingAs($this->employee_read->user)->post($this->store_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_add_hotel($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertEquals($this->created_count+1, Hotel::count());

        $hotel = Hotel::find($this->created_count+1);
        $this->assertData($hotel, $data);
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_hotel_with_invalid_name($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['name' => '']);
        $data_sets[] = array_merge($data, ['name' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('name');
            $this->assertCount($this->created_count, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['name', 'contract']));
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_hotel_with_invalid_phone($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['phone' => '']);
        $data_sets[] = array_merge($data, ['phone' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('phone');
            $this->assertCount($this->created_count, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['phone', 'contract']));
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_hotel_with_invalid_email($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['email' => '']);
        $data_sets[] = array_merge($data, ['email' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('email');
            $this->assertCount($this->created_count, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['email', 'contract']));
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_hotel_with_invalid_contact_name($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['contact_name' => '']);
        $data_sets[] = array_merge($data, ['contact_name' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('contact_name');
            $this->assertCount($this->created_count, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['contact_name', 'contract']));
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_hotel_with_invalid_contact_phone($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['contact_phone' => '']);
        $data_sets[] = array_merge($data, ['contact_phone' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('contact_phone');
            $this->assertCount($this->created_count, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['contact_phone', 'contract']));
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_hotel_with_invalid_contact_email($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['contact_email' => '']);
        $data_sets[] = array_merge($data, ['contact_email' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('contact_email');
            $this->assertCount($this->created_count, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['contact_email', 'contract']));
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_hotel_with_invalid_city($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['city_id' => '']);
        $data_sets[] = array_merge($data, ['city_id' => 'ahm']);
        $data_sets[] = array_merge($data, ['city_id' => 900000]);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('city_id');
            $this->assertCount($this->created_count, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['city_id', 'contract']));
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_hotel_with_invalid_contract($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['contract' => '']);
        $data_sets[] = array_merge($data, ['contract' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);

            $response->assertSessionHasErrors('contract');
            $this->assertCount($this->created_count, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['contract']));
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_hotel_with_invalid_extra_emails($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $data_sets[] = array_merge($data, ['extra_emails' => '']);
        $data_sets[] = array_merge($data, ['extra_emails' => 'ahm']);
        $data_sets[] = array_merge($data, ['extra_emails' => ['ahm']]);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->post($this->store_route, $data_set);
            $expected_error = 'extra_emails';
            if (is_array($data_set['extra_emails']) && $data_set['extra_emails']) {
                $expected_error = 'extra_emails.*';
            }
            $response->assertSessionHasErrors($expected_error);
            $this->assertCount($this->created_count, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['contract', 'extra_emails']));
        }
    }

    /** @test */
    public function a_guest_cannot_see_edit_hotel_page()
    {
        $hotel = factory(Hotel::class)->create();
        $this->get($hotel->editPath())->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_edit_hotel_page()
    {
        $hotel = factory(Hotel::class)->create();
        $this->actingAs($this->employee_read->user)->get($hotel->editPath())->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_edit_hotel_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $hotel = factory(Hotel::class)->create();
        $response = $this->actingAs($auth)->get($hotel->editPath());
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('hotels.edit');
        $hotel_from_view = $this->getDataFromResponse($response, 'hotel');
        $cities = $this->getDataFromResponse($response, 'cities');
        $this->assertNotNull($cities);
        $this->assertNotNull($hotel_from_view);
        $this->assertEquals($hotel->id, $hotel_from_view->id);
    }

    /** @test */
    public function a_guest_cannot_edit_hotel()
    {
        $hotel = factory(Hotel::class)->create();
        $this->patch($this->update_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_edit_hotel()
    {
        $hotel = factory(Hotel::class)->create();
        $this->actingAs($this->employee_read->user)->patch($this->update_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_edit_hotel($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $hotel = factory(Hotel::class)->create();

        $data = $this->update_data();
        $response = $this->actingAs($auth)->patch($this->update_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertCount($this->created_count+1, Hotel::all());

        $hotel->refresh();
        $this->assertData($hotel, $data);
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_hotel_with_invalid_name($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $hotel = factory(Hotel::class)->create();

        $data = $this->data();
        $data_sets[] = array_merge($data, ['name' => '']);
        $data_sets[] = array_merge($data, ['name' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('name');
            $this->assertCount($this->created_count+1, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['name', 'contract']));
            $old_data = Arr::except($hotel->toArray(), ['created_at', 'updated_at', 'deleted_at']);
            $this->assertData($hotel->refresh(), $old_data);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_hotel_with_invalid_email($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $hotel = factory(Hotel::class)->create();

        $data = $this->data();
        $data_sets[] = array_merge($data, ['email' => '']);
        $data_sets[] = array_merge($data, ['email' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('email');
            $this->assertCount($this->created_count+1, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['email', 'contract']));
            $old_data = Arr::except($hotel->toArray(), ['created_at', 'updated_at', 'deleted_at']);
            $this->assertData($hotel->refresh(), $old_data);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_hotel_with_invalid_phone($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $hotel = factory(Hotel::class)->create();

        $data = $this->data();
        $data_sets[] = array_merge($data, ['phone' => '']);
        $data_sets[] = array_merge($data, ['phone' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('phone');
            $this->assertCount($this->created_count+1, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['phone', 'contract']));
            $old_data = Arr::except($hotel->toArray(), ['created_at', 'updated_at', 'deleted_at']);
            $this->assertData($hotel->refresh(), $old_data);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_hotel_with_invalid_contact_name($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $hotel = factory(Hotel::class)->create();

        $data = $this->data();
        $data_sets[] = array_merge($data, ['contact_name' => '']);
        $data_sets[] = array_merge($data, ['contact_name' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('contact_name');
            $this->assertCount($this->created_count+1, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['contact_name', 'contract']));
            $old_data = Arr::except($hotel->toArray(), ['created_at', 'updated_at', 'deleted_at']);
            $this->assertData($hotel->refresh(), $old_data);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_hotel_with_invalid_contact_email($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $hotel = factory(Hotel::class)->create();

        $data = $this->data();
        $data_sets[] = array_merge($data, ['contact_email' => '']);
        $data_sets[] = array_merge($data, ['contact_email' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('contact_email');
            $this->assertCount($this->created_count+1, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['contact_email', 'contract']));
            $old_data = Arr::except($hotel->toArray(), ['created_at', 'updated_at', 'deleted_at']);
            $this->assertData($hotel->refresh(), $old_data);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_hotel_with_invalid_contact_phone($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $hotel = factory(Hotel::class)->create();

        $data = $this->data();
        $data_sets[] = array_merge($data, ['contact_phone' => '']);
        $data_sets[] = array_merge($data, ['contact_phone' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('contact_phone');
            $this->assertCount($this->created_count+1, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['contact_phone', 'contract']));
            $old_data = Arr::except($hotel->toArray(), ['created_at', 'updated_at', 'deleted_at']);
            $this->assertData($hotel->refresh(), $old_data);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_hotel_with_invalid_city($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $hotel = factory(Hotel::class)->create();

        $data = $this->data();
        $data_sets[] = array_merge($data, ['city_id' => '']);
        $data_sets[] = array_merge($data, ['city_id' => 'ahm']);
        $data_sets[] = array_merge($data, ['city_id' => 999999]);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('city_id');
            $this->assertCount($this->created_count+1, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['city_id', 'contract']));
            $old_data = Arr::except($hotel->toArray(), ['created_at', 'updated_at', 'deleted_at']);
            $this->assertData($hotel->refresh(), $old_data);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_hotel_with_invalid_contract($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $hotel = factory(Hotel::class)->create();

        $data = $this->data();
        $response = $this->actingAs($auth)->patch($this->update_route, $data);
        $hotel->refresh();
        $old_contract = $hotel->file;

        $data_sets[] = array_merge($data, ['contract' => '']);
        $data_sets[] = array_merge($data, ['contract' => 'ahm']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('contract');
            $this->assertCount($this->created_count+1, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['contract']));
            $old_data = Arr::except($hotel->toArray(), ['file', 'created_at', 'updated_at', 'deleted_at']);
            $this->assertData($hotel->refresh(), $old_data);
            $this->assertEquals($hotel->id, $old_contract->fileable_id);
            $this->assertEquals(1, File::first()->id);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_edit_hotel_with_invalid_extra_emails($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $hotel = factory(Hotel::class)->create();

        $data = $this->data();
        $response = $this->actingAs($auth)->patch($this->update_route, $data);
        $hotel->refresh();
        $old_contract = $hotel->file;

        $data_sets[] = array_merge($data, ['extra_emails' => '']);
        $data_sets[] = array_merge($data, ['extra_emails' => 'ahm']);
        $data_sets[] = array_merge($data, ['extra_emails' => ['ahm']]);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($auth)->patch($this->update_route, $data_set);

            $expected_error = 'extra_emails';
            if (is_array($data_set['extra_emails']) && $data_set['extra_emails']) {
                $expected_error = 'extra_emails.*';
            }
            $response->assertSessionHasErrors($expected_error);
            $this->assertCount($this->created_count+1, Hotel::all());
            $this->assertOldInput(Arr::except($data_set, ['contract', 'extra_emails']));
            $old_data = Arr::except($hotel->toArray(), ['file', 'created_at', 'updated_at', 'deleted_at']);
            $this->assertData($hotel->refresh(), $old_data);
        }
    }






    private function data()
    {
        return [
            'name' => 'Hotel Test',
            'phone' => '01142558214',
            'email' => 'hoteltest@gmail.com',
            'contact_name' => 'Ahmed Sabbagh',
            'contact_phone' => '01023068346',
            'contact_email' => 'ahmedsabbagh1192@gmail.com',
            'city_id' => factory(City::class)->create()->id,
            'contract' => UploadedFile::fake()->create('contractFileHotel.pdf', 1),
            'extra_emails' => ['test1@hotel.com', 'test2@hotel.com']
        ];
    }

    private function update_data()
    {
        return [
            'name' => 'Hotel Test updated',
            'phone' => '011425582144',
            'email' => 'hoteltestupdated@gmail.com',
            'contact_name' => 'Ahmed Sabbagh updated',
            'contact_phone' => '010230683466',
            'contact_email' => 'ahmedsabbagh1192updated@gmail.com',
            'city_id' => factory(City::class)->create()->id,
            'contract' => UploadedFile::fake()->create('contractFileHotelupdated.pdf', 1),
            'extra_emails' => ['test1updated@hotel.com', 'test2updated@hotel.com']
        ];
    }

    private function assertData($hotel, $data)
    {
        foreach ($data as $key => $value) {
            if($key == 'contract'){
                $this->assertEquals(1, File::count());
                $this->assertEquals($hotel->id, File::first()->fileable_id);
            }elseif($key == 'extra_emails'){
                $this->assertEquals(count($value), Info::count());
                foreach($value as $email){
                    $row = Info::where('info_value', $email)->first();
                    $this->assertNotNull($row);
                    $this->assertEquals('email', $row->info_type);
                    $this->assertEquals($hotel->id, $row->infoable_id);
                }
            }else{
                $this->assertEquals($value, $hotel->{$key});
            }
        }
    }
}
