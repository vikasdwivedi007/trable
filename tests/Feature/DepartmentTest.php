<?php

namespace Tests\Feature;

use App\Models\Employee;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Artisan;
use Tests\TestCase;
use App\Models\Department;

class DepartmentTest extends TestCase
{

    use RefreshDatabase;

    private $admin;
    private $employee_read;
    private $employee_write;
    private $created_count = 1;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->index_route = route('departments.index');
        $this->create_route = route('departments.create');
        $this->store_route = route('departments.store');
        $this->edit_route = route('departments.edit', ['department' => $this->created_count + 1]);
        $this->update_route = route('departments.update', ['department' => $this->created_count + 1]);
        $this->activate_route = route('departments.activate', ['department' => $this->created_count + 1]);
        $this->deactivate_route = route('departments.deactivate', ['department' => $this->created_count + 1]);

        Artisan::call('testlogs:clear');
        $this->admin = $this->createAdminEmployee();
        $this->employee_write = $this->createEmployeeWithPermission(Department::PERMISSION_NAME, 'write');
        $this->employee_read = $this->createEmployeeWithPermission(Department::PERMISSION_NAME, 'read');
    }

    /** @test */
    public function a_guest_is_redirected_to_login()
    {
        $this->get($this->index_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_See_departments_page()
    {
        $this->actingAs($this->employee_write->user)->get($this->index_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_departments_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $count = 3;
        $deps = factory(Department::class, 3)->create();
        foreach ($deps as $dep) {
            $emp = factory(Employee::class)->create(['department_id'=>$dep->id]);
        }
        $response = $this->actingAs($auth)->get($this->index_route);

        $response->assertOk();
        $response->assertViewIs('departments.index');

        $departments_from_view = $this->getDataFromResponse($response, 'departments');
        $this->assertNotNull($departments_from_view);
        $this->assertCount($count + $this->created_count, $departments_from_view);
        $this->assertCount($count + $this->created_count, Department::all());
        foreach ($departments_from_view as $dep) {
            $this->assertGreaterThan(0, $dep->employees_count);
        }
    }

    /** @test */
    public function a_guest_cannot_see_add_page()
    {
        $this->get($this->create_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_add_page()
    {
        $this->actingAs($this->employee_read->user)->get($this->create_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_add_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $department = factory(Department::class)->create();
        $response = $this->actingAs($auth)->get($this->create_route);
        $response->assertOk();
        $response->assertViewIs('departments.create');
    }

    /** @test */
    public function a_guest_cannot_add_department()
    {
        $this->post($this->store_route, $this->update_data())->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_add_department()
    {
        $this->actingAs($this->employee_read->user)->post($this->store_route, $this->update_data())->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_add_department($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $response = $this->actingAs($auth)->post($this->store_route, $this->data());

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $this->assertCount($this->created_count + 1, Department::all());//one created plus 2 for (admin and employee)
        $department = Department::find($this->created_count + 1);
        $this->assertNotNull($department);
        $this->assertEquals($this->data()['name'], $department->name);
        $response->assertSessionHas('success');
    }

    /** @test */
    public function user_with_permission_cannot_add_department_with_invalid_name()
    {
        $data = array_merge($this->data(), ['name' => '']);
        $response = $this->actingAs($this->admin->user)->post($this->store_route, $data);

        $response->assertSessionHasErrors('name');
    }

    /** @test */
    public function a_guest_cannot_see_edit_page()
    {
        $deparment = factory(Department::class)->create();
        $this->get($this->edit_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_edit_page()
    {
        $deparment = factory(Department::class)->create();
        $this->actingAs($this->employee_read->user)->get($this->edit_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_edit_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $department = factory(Department::class)->create();
        $response = $this->actingAs($auth)->get($this->edit_route);

        $response->assertOk();
        $response->assertViewIs('departments.edit');

        $department_from_view = $this->getDataFromResponse($response, 'department');

        $this->assertNotNull($department_from_view);
        $this->assertEquals($department->id, $department_from_view->id);
    }

    /** @test */
    public function a_guest_cannot_edit_department()
    {
        $deparment = factory(Department::class)->create();
        $this->patch($this->update_route, $this->update_data())->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_edit_department()
    {
        $deparment = factory(Department::class)->create();
        $this->actingAs($this->employee_read->user)->patch($this->update_route, $this->update_data())->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_edit_department($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $department = factory(Department::class)->create();

        $response = $this->actingAs($auth)->patch($this->update_route, $this->update_data());

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $this->assertCount($this->created_count+1, Department::all());

        $department->refresh();

        $this->assertEquals($this->update_data()['name'], $department->name);
        $response->assertSessionHas('success');
    }

    /** @test */
    public function user_with_permission_cannot_edit_department_with_invalid_name()
    {
        $department = factory(Department::class)->create();
        $old_name = $department->name;

        $data = array_merge($this->update_data(), ['name' => '']);
        $response = $this->actingAs($this->admin->user)->patch($this->update_route, $data);

        $response->assertSessionHasErrors('name');
        $this->assertCount($this->created_count+1, Department::all());

        $department->refresh();
        $this->assertEquals($old_name, $department->name);
    }

    /** @test */
    public function a_guest_cannot_activate_or_deactivate_department()
    {
        $department = factory(Department::class)->create();
        $this->get($this->activate_route)->assertRedirect(route('login'));
        $this->get($this->deactivate_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_activate_or_deactivate_department()
    {
        $department = factory(Department::class)->create();
        $this->actingAs($this->employee_read->user)->get($this->activate_route)->assertForbidden();
        $this->actingAs($this->employee_read->user)->get($this->deactivate_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_deactivate_department($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $emps_count = 5;
        $department = factory(Department::class)->create();
        //5 employees in his team
        $emps = factory(Employee::class, $emps_count)->create([
            'department_id' => $department->id,
            'active' => 1
        ])->load('user');
        $response = $this->actingAs($auth)->get($this->deactivate_route);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);

        $this->assertEquals(0, $department->fresh()->active);
        $emps->map->refresh();
        foreach($emps as $emp){
            $this->assertEquals(0, $emp->active);
        }
        //depends on requirement, will we delete users or not
        $this->assertCount($emps_count, Employee::whereIn('id', $emps->pluck('id'))->get());
        $this->assertCount($emps_count, User::whereIn('id', $emps->map->user->pluck('id'))->get());

        $response->assertSessionHas('success');
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_activate_department($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $emps_count = 5;
        $department = factory(Department::class)->create();
        //5 employees in his team
        $emps = factory(Employee::class, $emps_count)->create([
            'department_id' => $department->id,
            'active' => 1
        ])->load('user');
        $response = $this->actingAs($auth)->get($this->deactivate_route);
        $response = $this->actingAs($auth)->get($this->activate_route);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);

        $emps->map->refresh();
        foreach($emps as $emp){
            $this->assertEquals(1, $emp->active);
        }
        $this->assertEquals(1, $department->fresh()->active);
        $this->assertCount($emps_count, Employee::whereIn('id', $emps->pluck('id'))->get());
        $this->assertCount($emps_count, User::whereIn('id', $emps->map->user->pluck('id'))->get());
        $response->assertSessionHas('success');
    }




    private function data()
    {
        return [
            'name' => 'General department',
        ];
    }

    private function update_data()
    {
        return [
            'name' => 'Updated department'
        ];
    }
}
