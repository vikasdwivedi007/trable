<?php

namespace Tests\Feature;

use App\Models\City;
use App\Models\VBNight;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Str;
use Tests\TestCase;

class VBNightTest extends TestCase
{
    use RefreshDatabase;

    private $admin;
    private $employee_read;
    private $employee_write;
    private $created_count = 0;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->index_route = route('vbnights.index');
        $this->services_index_route = route('services.index').'#pills-Visit-by-Night-tab';
        $this->create_route = route('vbnights.create');
        $this->store_route = route('vbnights.store');
        $this->edit_route = route('vbnights.edit', ['vbnight'=>1]);
        $this->update_route = route('vbnights.update', ['vbnight'=>1]);

        Artisan::call('testlogs:clear');
        $this->admin = $this->createAdminEmployee();
        $this->employee_write = $this->createEmployeeWithPermission(VBNight::PERMISSION_NAME, 'write');
        $this->employee_read = $this->createEmployeeWithPermission(VBNight::PERMISSION_NAME, 'read');
    }

    /** @test */
    public function a_guest_is_redirected_to_login()
    {
        $this->get($this->index_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_is_forbidden()
    {
        $this->actingAs($this->employee_write->user)->get($this->index_route)->assertForbidden();
    }

    /**
     *
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_vbnights_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $count = 3;
        $vbnights = factory(VBNight::class, $count)->create();
        $response = $this->actingAs($auth)->get($this->index_route);

        $response->assertOk();
        $vbnights_from_view = $this->getDataFromDatatableResponse($response);
        $this->assertNotNull($vbnights_from_view);
        $this->assertCount($count, $vbnights_from_view);
        $this->assertCount($count, VBNight::all());
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_paginate_vbnights($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $all_count = 10;
        $per_page = 3;
        $vbnights = factory(VBNight::class, $all_count)->create();

        $next_page = '';
        $remaining = $all_count;
        $ids = [];
        for ($i=0;$i<$all_count;$i+=$per_page){
            $url_query = '?length=' . $per_page . '&start=' . $i;
            $url = $this->index_route;
            $url .= $url_query;
            $response = $this->actingAs($auth)->get($url);

            $response->assertOk();
            $vbnights_from_view = $this->getDataFromDatatableResponse($response);

            //make sure that no raw is sent twice when paginating
            $diff = (array_diff($ids, $vbnights_from_view->pluck('id')->toArray()));
            $this->assertEquals($diff, $ids);
            $ids = array_merge($ids, $vbnights_from_view->pluck('id')->toArray());

            $this->assertNotNull($vbnights_from_view);

            //assert that we got the expected number of raws
            $count_should_be = $remaining >= $per_page ? $per_page : $remaining;
            $remaining -= count($vbnights_from_view);
            $this->assertCount($count_should_be, $vbnights_from_view);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_search_vbnight($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $loops = 13;
        $can_search_by = (new VBNight())->can_search_by;
        $can_search_by = array_map(function ($item) {
            return str_replace('v_b_nights.', '', $item);
        }, $can_search_by);
        for ($i=0;$i<$loops;$i++){
            $vbnights = factory(VBNight::class, 20)->create()->load('city');

            $rand_rest = $vbnights->toArray()[rand(0,9)];
            $rand_name = $rand_rest['city']['name'];
            $rand_word = Arr::random(explode(' ', $rand_name));
            $url_query = '?search[value]=' . $rand_word;

            $response = $this->actingAs($auth)->get($this->index_route.$url_query);

            $response->assertOk();
            $vbnights_from_view = $this->getDataFromDatatableResponse($response);
            $this->assertNotNull($vbnights_from_view);
            $this->assertGreaterThan(0, count($vbnights_from_view));

            //assert searched name exists in the result
            foreach($vbnights_from_view as $vbnight){
                $found = 0;
                foreach ($can_search_by as $key) {
                    if (stripos($key, '.') !== false) {
                        $parts = explode('.', $key);
                        if (stripos($vbnight->{$parts[0]}->{$parts[1]}, $rand_word) !== false) {
                            $found++;
                        }
                    } elseif (stripos($vbnight->{$key}, $rand_word) !== false) {
                        $found++;
                    }
                }
                $this->assertGreaterThan(0, $found);
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_sort_vbnights($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        for ($z=0;$z<10;$z++){
            $all_count = 10;
            $vbnights = factory(VBNight::class, $all_count)->create();
            $param = 'city.name';
            $url_query = '?order[0][dir]=asc&order[0][column]=0&columns[0][data]=' . $param;

            $response = $this->actingAs($auth)->get($this->index_route.$url_query);
            $response->assertOk();

            $vbnights_from_view = $this->getDataFromDatatableResponse($response);
            $this->assertNotNull($vbnights_from_view);
            $this->assertGreaterThan(0, count($vbnights_from_view));

            $vbnights = $vbnights_from_view;
            for ($i=0;$i<count($vbnights);$i++){
                if($i > 0) {
                    if (stripos($param, '.') !== false) {
                        $parts = explode('.', $param);
                        $this->greaterThanOrEqual($vbnights->get($i - 1)->{$parts[0]}->{$parts[1]}, $vbnights->get($i)->{$parts[0]}->{$parts[1]});
                    } else {
                        $this->greaterThanOrEqual($vbnights->get($i - 1)->{$param}, $vbnights->get($i)->{$param});
                    }
                }
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_delete_vbnight($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $vbnight = VBNight::first();

        $response = $this->actingAs($auth)->delete($vbnight->deletePath());
        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->services_index_route);
        $this->assertNull(VBNight::find($vbnight->id));
        $response->assertSessionHas('success');
    }

    /** @test */
    public function a_guest_cannot_delete_vbnight()
    {
        $vbnight = factory(VBNight::class)->create();
        $this->delete($vbnight->deletePath())->assertRedirect(route('login'));
        $this->assertNotNull(VBNight::find($vbnight->id));
    }

    /** @test */
    public function user_without_permission_cannot_delete_vbnight()
    {
        $vbnight = factory(VBNight::class)->create();
        $this->actingAs($this->employee_read->user)->delete($vbnight->deletePath())->assertForbidden();
        $this->assertNotNull(VBNight::find($vbnight->id));
    }

    /** @test */
    public function a_guest_cannot_see_add_vbnight_page()
    {
        $this->get($this->create_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_add_vbnight_page()
    {
        $this->actingAs($this->employee_read->user)->get($this->create_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_add_vbnight_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $response = $this->actingAs($auth)->get($this->create_route);
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('vbnights.create');
        $cities = $this->getDataFromResponse($response, 'cities');
        $this->assertNotNull($cities);
    }

    /** @test */
    public function a_guest_cannot_add_vbnight()
    {
        $this->post($this->store_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_add_vbnight()
    {
        $this->actingAs($this->employee_read->user)->post($this->store_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_add_vbnight($auth)
    {
        $this->withoutExceptionHandling();
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->services_index_route);
        $response->assertSessionHas('success');
        $this->assertEquals($this->created_count+1, VBNight::count());
        $vbnight = VBNight::first();
        $this->assertData($vbnight, $data);
    }

    /** @test */
    public function a_guest_cannot_see_edit_vbnight_page()
    {
        $vbnight = factory(VBNight::class)->create();
        $this->get($vbnight->editPath())->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_edit_vbnight_page()
    {
        $vbnight = factory(VBNight::class)->create();
        $this->actingAs($this->employee_read->user)->get($vbnight->editPath())->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_edit_vbnight_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $vbnight = factory(VBNight::class)->create();
        $response = $this->actingAs($auth)->get($vbnight->editPath());
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('vbnights.edit');
        $vbnight_from_view = $this->getDataFromResponse($response, 'vbnight');
        $cities = $this->getDataFromResponse($response, 'cities');
        $this->assertNotNull($cities);
        $this->assertNotNull($vbnight_from_view);
        $this->assertEquals($vbnight->id, $vbnight_from_view->id);
    }

    /** @test */
    public function a_guest_cannot_edit_vbnight()
    {
        $vbnight = factory(VBNight::class)->create();
        $this->patch($this->update_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_edit_vbnight()
    {
        $vbnight = factory(VBNight::class)->create();
        $this->actingAs($this->employee_read->user)->patch($this->update_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_edit_vbnight($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $vbnight = VBNight::first();

        $data = $this->update_data();
        $response = $this->actingAs($auth)->patch($this->update_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->services_index_route);
        $response->assertSessionHas('success');
        $this->assertCount($this->created_count+1, VBNight::all());

        $vbnight->refresh();
        $this->assertData($vbnight, $data);
    }




    private function data()
    {
        $data = factory(VBNight::class)->make()->toArray();
        $data['buy_price_adult'] = 'EGP '.$data['buy_price_adult'];
        $data['sell_price_adult_vat_exc'] = 'EURO '.$data['sell_price_adult_vat_exc'];
        $data['buy_price_child'] = 'EGP '.$data['buy_price_child'];
        $data['sell_price_child_vat_exc'] = 'EURO '.$data['sell_price_child_vat_exc'];
        return $data;
    }

    private function update_data()
    {
        return $this->data();
    }

    private function assertData($vbnight, $data)
    {
        foreach ($data as $key => $value) {
            if(in_array($key, ['buy_price_adult', 'sell_price_adult_vat_exc', 'buy_price_child', 'sell_price_child_vat_exc'])){
                $value = trim((string)Str::of($value)->replace(['EGP ', 'EURO ', '%', ','], ''));
            }
            $this->assertEquals($value, $vbnight->{$key});
        }
    }
}
