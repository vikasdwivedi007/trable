<?php

namespace Tests\Feature;

use App\Models\City;
use App\Models\Transportation;
use App\Models\Car;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Artisan;
use Tests\TestCase;

class TransportationTest extends TestCase
{
    use RefreshDatabase;

    private $admin;
    private $employee_read;
    private $employee_write;
    private $created_count = 0;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->index_route = route('transportations.index');
        $this->create_route = route('transportations.create');
        $this->store_route = route('transportations.store');
        $this->edit_route = route('transportations.edit', ['transportation'=>1]);
        $this->update_route = route('transportations.update', ['transportation'=>1]);

        Artisan::call('testlogs:clear');
        $this->admin = $this->createAdminEmployee();
        $this->employee_write = $this->createEmployeeWithPermission(Transportation::PERMISSION_NAME, 'write');
        $this->employee_read = $this->createEmployeeWithPermission(Transportation::PERMISSION_NAME, 'read');
    }

    /** @test */
    public function a_guest_is_redirected_to_login()
    {
        $this->get($this->index_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_is_forbidden()
    {
        $this->actingAs($this->employee_write->user)->get($this->index_route)->assertForbidden();
    }

    /**
     *
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_transportations_page($auth)
    {
        $this->withoutExceptionHandling();
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $count = 3;
        $transportations = factory(Transportation::class, $count)->create();
        $response = $this->actingAs($auth)->get($this->index_route);

        $response->assertOk();
        $response->assertViewIs('transportations.index');

        $transportations_from_view = $this->getDataFromResponse($response, 'transportations');
        $this->assertNotNull($transportations_from_view);
        $this->assertCount($count, $transportations_from_view);
        $this->assertCount($count, Transportation::all());
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_paginate_transportations($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $all_count = 10;
        $per_page = 3;
        $transportations = factory(Transportation::class, $all_count)->create();

        $next_page = '';
        $remaining = $all_count;
        $ids = [];
        for ($i=1;$i<=$all_count;$i+=$per_page){
            $url_query = 'per_page='.$per_page;
            $url = $this->index_route;
            if($next_page){
                $url = $next_page;
                $url_query = '&'.$url_query;
            }else{
                $url_query = '?'.$url_query;
            }
            $url .= $url_query;
            $response = $this->actingAs($auth)->get($url);

            $response->assertOk();
            $response->assertViewIs('transportations.index');

            $transportations_from_view = $this->getDataFromResponse($response, 'transportations');

            //make sure that no raw is sent twice when paginating
            $diff = (array_diff($ids, $transportations_from_view->pluck('id')->toArray()));
            $this->assertEquals($diff, $ids);
            $ids = array_merge($ids, $transportations_from_view->pluck('id')->toArray());

            $this->assertNotNull($transportations_from_view);
            $next_page = $transportations_from_view->toArray()['next_page_url'];

            //assert that we got the expected number of raws
            $count_should_be = $remaining >= $per_page ? $per_page : $remaining;
            $remaining -= count($transportations_from_view);
            $this->assertCount($count_should_be, $transportations_from_view);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_search_transportation_by_name($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $loops = 13;
        for ($i=0;$i<$loops;$i++){
            $transportations = factory(Transportation::class, 20)->create();

            $rand_trans = $transportations->toArray()[rand(0,9)];
            $rand_name = $rand_trans['name'];
            $rand_word = Arr::random(explode(' ', $rand_name));
            $url_query = '?filter_by=name&filter_q='.$rand_word;

            $response = $this->actingAs($auth)->get($this->index_route.$url_query);

            $response->assertOk();
            $response->assertViewIs('transportations.index');

            $transportations_from_view = $this->getDataFromResponse($response, 'transportations');
            $this->assertNotNull($transportations_from_view);
            $this->assertGreaterThan(0, count($transportations_from_view));

            //assert searched name exists in the result
            foreach($transportations_from_view as $transportation){
                $this->assertStringContainsStringIgnoringCase($rand_word, $transportation->name);
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_sort_transportations($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        for ($z=0;$z<10;$z++){
            $all_count = 10;
            $transportations = factory(Transportation::class, $all_count)->create();
            $param = 'name';
            $order = 'ASC';
            $url_query = '?order_by='.$param.'&order='.$order;

            $response = $this->actingAs($auth)->get($this->index_route.$url_query);
            $response->assertOk();
            $response->assertViewIs('transportations.index');

            $transportations_from_view = $this->getDataFromResponse($response, 'transportations');
            $this->assertNotNull($transportations_from_view);
            $this->assertGreaterThan(0, count($transportations_from_view));

            $transportations = $transportations_from_view->toArray()['data'];
            for ($i=0;$i<count($transportations);$i++){
                if($i > 0){
                    if($order == 'ASC'){
                        $this->lessThanOrEqual($transportations[$i-1][$param], $transportations[$i][$param]);
                    }else{
                        $this->greaterThanOrEqual($transportations[$i-1][$param], $transportations[$i][$param]);
                    }
                }
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_delete_transportation($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $transportation = Transportation::first();

        $response = $this->actingAs($auth)->delete($transportation->deletePath());
        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $this->assertNull(Transportation::find($transportation->id));
        $response->assertSessionHas('success');
        $this->assertEquals(0, Car::count());
    }

    /** @test */
    public function a_guest_cannot_delete_transportation()
    {
        $transportation = factory(Transportation::class)->create();
        $this->delete($transportation->deletePath())->assertRedirect(route('login'));
        $this->assertNotNull(Transportation::find($transportation->id));
    }

    /** @test */
    public function user_without_permission_cannot_delete_transportation()
    {
        $transportation = factory(Transportation::class)->create();
        $this->actingAs($this->employee_read->user)->delete($transportation->deletePath())->assertForbidden();
        $this->assertNotNull(Transportation::find($transportation->id));
    }

    /** @test */
    public function a_guest_cannot_see_add_transportation_page()
    {
        $this->get($this->create_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_add_transportation_page()
    {
        $this->actingAs($this->employee_read->user)->get($this->create_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_add_transportation_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $response = $this->actingAs($auth)->get($this->create_route);
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('transportations.create');
        $cities = $this->getDataFromResponse($response, 'cities');
        $this->assertNotNull($cities);
    }

    /** @test */
    public function a_guest_cannot_add_transportation()
    {
        $this->post($this->store_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_add_transportation()
    {
        $this->actingAs($this->employee_read->user)->post($this->store_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_add_transportation($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertEquals($this->created_count+1, Transportation::count());

        $transportation = Transportation::find($this->created_count+1)->load('cars');
        $this->assertData($transportation, $data);
    }

    /** @test */
    public function a_guest_cannot_see_edit_transportation_page()
    {
        $transportation = factory(Transportation::class)->create();
        $this->get($transportation->editPath())->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_edit_transportation_page()
    {
        $transportation = factory(Transportation::class)->create();
        $this->actingAs($this->employee_read->user)->get($transportation->editPath())->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_edit_transportation_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $transportation = factory(Transportation::class)->create();
        $response = $this->actingAs($auth)->get($transportation->editPath());
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('transportations.edit');
        $transportation_from_view = $this->getDataFromResponse($response, 'transportation');
        $cities = $this->getDataFromResponse($response, 'cities');
        $this->assertNotNull($cities);
        $this->assertNotNull($transportation_from_view);
        $this->assertEquals($transportation->id, $transportation_from_view->id);
    }

    /** @test */
    public function a_guest_cannot_edit_transportation()
    {
        $transportation = factory(Transportation::class)->create();
        $this->patch($this->update_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_edit_transportation()
    {
        $transportation = factory(Transportation::class)->create();
        $this->actingAs($this->employee_read->user)->patch($this->update_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_edit_transportation($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $transportation = Transportation::first();

        $data = $this->update_data();
        $response = $this->actingAs($auth)->patch($this->update_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertCount($this->created_count+1, Transportation::all());

        $transportation->refresh()->load('cars');
        $this->assertData($transportation, $data);
    }




    private function data()
    {
        return [
            'code' => 'Transportation Code1234',
            'name' => 'Transportation Test',
            'phone' => '01142558214',
            'email' => 'transportationtest@gmail.com',
            'contact_name' => 'Ahmed Sabbagh',
            'contact_phone' => '01023068346',
            'contact_email' => 'ahmedsabbagh1192@gmail.com',
            'city_id' => factory(City::class)->create()->id,
            'cars' => [
                ['driver_name'=>'Ahmed 1', 'driver_phone'=>'01142558214', 'driver_no'=>'123456789', 'car_type'=>'CARTYPE1', 'car_model'=>'CARMODEL1', 'car_no'=>'987654321', 'buy_price'=>16.1, 'sell_price_vat_exc'=>18.1],
                ['driver_name'=>'Sam 2', 'driver_phone'=>'01142558213', 'driver_no'=>'123456788', 'car_type'=>'CARTYPE2', 'car_model'=>'CARMODEL2', 'car_no'=>'987654322', 'buy_price'=>20.2, 'sell_price_vat_exc'=>17.9],
                ['driver_name'=>'Kareem 3', 'driver_phone'=>'01142558212', 'driver_no'=>'123456787', 'car_type'=>'CARTYPE3', 'car_model'=>'CARMODEL3', 'car_no'=>'987654323', 'buy_price'=>30.5, 'sell_price_vat_exc'=>25.1],
            ]
        ];
    }

    private function update_data()
    {
        return [
            'code' => 'Transportation Code1234 updated',
            'name' => 'Transportation Test updated',
            'phone' => '0114255821444',
            'email' => 'transportationtestupdated@gmail.com',
            'contact_name' => 'Ahmed Sabbagh updated',
            'contact_phone' => '0102306834666',
            'contact_email' => 'ahmedsabbagh1192updated@gmail.com',
            'city_id' => factory(City::class)->create()->id,
            'cars' => [
                ['id'=>3, 'driver_name'=>'Kareem 3', 'driver_phone'=>'01142558212', 'driver_no'=>'123456787', 'car_type'=>'CARTYPE3', 'car_model'=>'CARMODEL3', 'car_no'=>'987654323', 'buy_price'=>30.5, 'sell_price_vat_exc'=>25.1],
                ['driver_name'=>'Mohsen 4', 'driver_phone'=>'01142558219', 'driver_no'=>'1234567879', 'car_type'=>'CARTYPE4', 'car_model'=>'CARMODEL4', 'car_no'=>'9876543239', 'buy_price'=>5.5, 'sell_price_vat_exc'=>1.1],
            ]
        ];
    }

    private function assertData($transportation, $data)
    {
        foreach ($data as $key => $value) {
            if($key == 'cars'){
                $count = count($data[$key]);
                $this->assertEquals($count, Car::count());
                foreach($data['cars'] as $car){
                    if(isset($car['id'])){
                        $car_db = Car::find($car['id']);
                    }else{
                        $car_db = Car::where('car_model', $car['car_model'])->first();
                    }
                    $this->assertNotNull($car_db);
                    $this->assertEquals($transportation->id, $car_db->transportation_id);
                    $this->assertEquals($car['driver_name'], $car_db->driver_name);
                    $this->assertEquals($car['driver_phone'], $car_db->driver_phone);
                    $this->assertEquals($car['driver_no'], $car_db->driver_no);
                    $this->assertEquals($car['car_type'], $car_db->car_type);
                    $this->assertEquals($car['car_model'], $car_db->car_model);
                    $this->assertEquals($car['car_no'], $car_db->car_no);
                    $this->assertEquals($car['buy_price'], $car_db->buy_price);
                    $this->assertEquals($car['sell_price_vat_exc'], $car_db->sell_price_vat_exc);
                }
            }else{
                $this->assertEquals($value, $transportation->{$key});
            }
        }
    }
}
