<?php

namespace Tests\Feature;

use App\Models\City;
use App\Models\File;
use App\Models\Shop;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Str;
use Tests\TestCase;

class ShopTest extends TestCase
{
    use RefreshDatabase;

    private $admin;
    private $employee_read;
    private $employee_write;
    private $created_count = 0;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->index_route = route('shops.index');
        $this->services_index_route = route('services.index') . '#pills-Shops-tab';
        $this->create_route = route('shops.create');
        $this->store_route = route('shops.store');
        $this->edit_route = route('shops.edit', ['shop' => 1]);
        $this->update_route = route('shops.update', ['shop' => 1]);

        Artisan::call('testlogs:clear');
        $this->admin = $this->createAdminEmployee();
        $this->employee_write = $this->createEmployeeWithPermission(Shop::PERMISSION_NAME, 'write');
        $this->employee_read = $this->createEmployeeWithPermission(Shop::PERMISSION_NAME, 'read');
    }

    /** @test */
    public function a_guest_is_redirected_to_login()
    {
        $this->get($this->index_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_is_forbidden()
    {
        $this->actingAs($this->employee_write->user)->get($this->index_route)->assertForbidden();
    }

    /**
     *
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_shops_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $count = 3;
        $shops = factory(Shop::class, $count)->create();
        $response = $this->actingAs($auth)->get($this->index_route);

        $response->assertOk();

        $shops_from_view = $this->getDataFromDatatableResponse($response);
        $this->assertNotNull($shops_from_view);
        $this->assertCount($count, $shops_from_view);
        $this->assertCount($count, Shop::all());
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_paginate_shops($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $all_count = 10;
        $per_page = 3;
        $shops = factory(Shop::class, $all_count)->create();

        $next_page = '';
        $remaining = $all_count;
        $ids = [];
        for ($i = 0; $i < $all_count; $i += $per_page) {
            $url_query = '?length=' . $per_page . '&start=' . $i;
            $url = $this->index_route;
            $url .= $url_query;
            $response = $this->actingAs($auth)->get($url);

            $response->assertOk();
            $shops_from_view = $this->getDataFromDatatableResponse($response);

            //make sure that no raw is sent twice when paginating
            $diff = (array_diff($ids, $shops_from_view->pluck('id')->toArray()));
            $this->assertEquals($diff, $ids);
            $ids = array_merge($ids, $shops_from_view->pluck('id')->toArray());

            $this->assertNotNull($shops_from_view);

            //assert that we got the expected number of raws
            $count_should_be = $remaining >= $per_page ? $per_page : $remaining;
            $remaining -= count($shops_from_view);
            $this->assertCount($count_should_be, $shops_from_view);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_search_shop($auth)
    {
        $this->withoutExceptionHandling();
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $loops = 13;
        $can_search_by = (new Shop())->can_search_by;
        $can_search_by = array_map(function ($item) {
            return str_replace('shops.', '', $item);
        }, $can_search_by);
        for ($i = 0; $i < $loops; $i++) {
            $shops = factory(Shop::class, 20)->create();

            $rand_shop = $shops->toArray()[rand(0, 9)];
            $rand_name = $rand_shop['name'];
            $rand_word = Arr::random(explode(' ', $rand_name));
            $url_query = '?search[value]=' . $rand_word;

            $response = $this->actingAs($auth)->get($this->index_route . $url_query);

            $response->assertOk();

            $shops_from_view = $this->getDataFromDatatableResponse($response);
            $this->assertNotNull($shops_from_view);
            $this->assertGreaterThan(0, count($shops_from_view));

            //assert searched name exists in the result
            foreach ($shops_from_view as $shop) {
                $found = 0;
                foreach ($can_search_by as $key) {
                    if (stripos($key, '.') !== false) {
                        $parts = explode('.', $key);
                        if (stripos($shop->{$parts[0]}->{$parts[1]}, $rand_word) !== false) {
                            $found++;
                        }
                    } elseif (stripos($shop->{$key}, $rand_word) !== false) {
                        $found++;
                    }
                }
                $this->assertGreaterThan(0, $found);
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_sort_shops($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        for ($z = 0; $z < 10; $z++) {
            $all_count = 10;
            $shops = factory(Shop::class, $all_count)->create();
            $param = 'name';
            $url_query = '?order[0][dir]=asc&order[0][column]=0&columns[0][data]=' . $param;

            $response = $this->actingAs($auth)->get($this->index_route . $url_query);
            $response->assertOk();

            $shops_from_view = $this->getDataFromDatatableResponse($response);
            $this->assertNotNull($shops_from_view);
            $this->assertGreaterThan(0, count($shops_from_view));

            $shops = $shops_from_view;
            for ($i = 0; $i < count($shops); $i++) {
                if($i > 0){
                    if (stripos($param, '.') !== false) {
                        $parts = explode('.', $param);
                        $this->greaterThanOrEqual($shops->get($i - 1)->{$parts[0]}->{$parts[1]}, $shops->get($i)->{$parts[0]}->{$parts[1]});
                    } else {
                        $this->greaterThanOrEqual($shops->get($i - 1)->{$param}, $shops->get($i)->{$param});
                    }
                }
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_delete_shop($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $shop = Shop::first();

        $response = $this->actingAs($auth)->delete($shop->deletePath());
        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->services_index_route);
        $this->assertNull(Shop::find($shop->id));
        $this->assertEquals(0, File::count());
        $response->assertSessionHas('success');
    }

    /** @test */
    public function a_guest_cannot_delete_shop()
    {
        $shop = factory(Shop::class)->create();
        $this->delete($shop->deletePath())->assertRedirect(route('login'));
        $this->assertNotNull(Shop::find($shop->id));
    }

    /** @test */
    public function user_without_permission_cannot_delete_shop()
    {
        $shop = factory(Shop::class)->create();
        $this->actingAs($this->employee_read->user)->delete($shop->deletePath())->assertForbidden();
        $this->assertNotNull(Shop::find($shop->id));
    }

    /** @test */
    public function a_guest_cannot_see_add_shop_page()
    {
        $this->get($this->create_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_add_shop_page()
    {
        $this->actingAs($this->employee_read->user)->get($this->create_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_add_shop_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $response = $this->actingAs($auth)->get($this->create_route);
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('shops.create');
        $cities = $this->getDataFromResponse($response, 'cities');
        $this->assertNotNull($cities);
    }

    /** @test */
    public function a_guest_cannot_add_shop()
    {
        $this->post($this->store_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_add_shop()
    {
        $this->actingAs($this->employee_read->user)->post($this->store_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_add_shop($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->services_index_route);
        $response->assertSessionHas('success');
        $this->assertEquals($this->created_count + 1, Shop::count());
        $shop = Shop::first();
        $this->assertData($shop, $data);
    }

    /** @test */
    public function a_guest_cannot_see_edit_shop_page()
    {
        $shop = factory(Shop::class)->create();
        $this->get($shop->editPath())->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_edit_shop_page()
    {
        $shop = factory(Shop::class)->create();
        $this->actingAs($this->employee_read->user)->get($shop->editPath())->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_edit_shop_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $shop = factory(Shop::class)->create();
        $response = $this->actingAs($auth)->get($shop->editPath());
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('shops.edit');
        $shop_from_view = $this->getDataFromResponse($response, 'shop');
        $cities = $this->getDataFromResponse($response, 'cities');
        $this->assertNotNull($cities);
        $this->assertNotNull($shop_from_view);
        $this->assertEquals($shop->id, $shop_from_view->id);
    }

    /** @test */
    public function a_guest_cannot_edit_shop()
    {
        $shop = factory(Shop::class)->create();
        $this->patch($this->update_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_edit_shop()
    {
        $shop = factory(Shop::class)->create();
        $this->actingAs($this->employee_read->user)->patch($this->update_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_edit_shop($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $shop = Shop::first();

        $data = $this->update_data();
        $response = $this->actingAs($auth)->patch($this->update_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->services_index_route);
        $response->assertSessionHas('success');
        $this->assertCount($this->created_count + 1, Shop::all());

        $shop->refresh();
        $this->assertData($shop, $data);
    }


    private function data()
    {
        $data = factory(Shop::class)->make()->toArray();
        $data = array_merge($data, [
            'contract' => UploadedFile::fake()->create('contractFileShop.pdf', 1)
        ]);
        $data['commission'] .= '%';
        return $data;
    }

    private function update_data()
    {
        $data = $this->data();
        $data = array_merge($data, [
            'contract' => UploadedFile::fake()->create('contractFileShopupdated.pdf', 1)
        ]);
        return $data;
    }

    private function assertData($shop, $data)
    {
        foreach ($data as $key => $value) {
            if ($key == 'contract') {
                $this->assertEquals(1, File::count());
                $this->assertEquals($shop->id, File::first()->fileable_id);
            } else {
                if($key == 'commission'){
                    $value = trim((string)Str::of($value)->replace(['EGP ', 'EURO ', '%', ','], ''));
                }
                $this->assertEquals($value, $shop->{$key});
            }
        }
    }
}
