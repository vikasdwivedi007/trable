<?php

namespace Tests\Feature;

use App\Models\City;
use App\Models\Discount;
use App\Models\File;
use App\Models\Hotel;
use App\Models\Info;
use App\Models\Room;
use App\Models\RoomDetails;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Artisan;
use Tests\TestCase;

class RoomTest extends TestCase
{
    use RefreshDatabase;

    private $admin;
    private $employee_read;
    private $employee_write;
    private $created_count = 0;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->index_route = route('hotels.index');
        $this->create_route = route('rooms.create');
        $this->store_route = route('rooms.store');
        $this->edit_route = route('rooms.edit', ['room'=>1]);
        $this->update_route = route('rooms.update', ['room'=>1]);

        Artisan::call('testlogs:clear');
        $this->admin = $this->createAdminEmployee();
        $this->employee_write = $this->createEmployeeWithPermission(Hotel::PERMISSION_NAME, 'write');
        $this->employee_read = $this->createEmployeeWithPermission(Hotel::PERMISSION_NAME, 'read');
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_delete_room($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $room = Room::first();

        $response = $this->actingAs($auth)->delete($room->deletePath());
        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $this->assertNull(Room::find($room->id));
        $response->assertSessionHas('success');
        $this->assertEquals(0, RoomDetails::count());
        $this->assertEquals(0, Discount::count());
    }

    /** @test */
    public function a_guest_cannot_delete_room()
    {
        $room = factory(Room::class)->create();
        $this->delete($room->deletePath())->assertRedirect(route('login'));
        $this->assertNotNull(Room::find($room->id));
    }

    /** @test */
    public function user_without_permission_cannot_delete_room()
    {
        $room = factory(Room::class)->create();
        $this->actingAs($this->employee_read->user)->delete($room->deletePath())->assertForbidden();
        $this->assertNotNull(Room::find($room->id));
    }

    /** @test */
    public function a_guest_cannot_see_add_room_page()
    {
        $this->get($this->create_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_add_room_page()
    {
        $this->actingAs($this->employee_read->user)->get($this->create_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_add_room_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $response = $this->actingAs($auth)->get($this->create_route);
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('rooms.create');
        $hotels = $this->getDataFromResponse($response, 'hotels');
        $this->assertNotNull($hotels);
    }

    /** @test */
    public function a_guest_cannot_add_room()
    {
        $this->post($this->store_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_add_room()
    {
        $this->actingAs($this->employee_read->user)->post($this->store_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_add_room($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertEquals($this->created_count+1, Room::count());

        $room = Room::find($this->created_count+1)->load(['details', 'discount']);
        $this->assertData($room, $data);
    }

    /** @test */
    public function a_guest_cannot_see_edit_room_page()
    {
        $room = factory(Room::class)->create();
        $this->get($room->editPath())->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_edit_room_page()
    {
        $room = factory(Room::class)->create();
        $this->actingAs($this->employee_read->user)->get($room->editPath())->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_edit_room_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $room = factory(Room::class)->create();
        $response = $this->actingAs($auth)->get($room->editPath());
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('rooms.edit');
        $room_from_view = $this->getDataFromResponse($response, 'room');
        $this->assertNotNull($room_from_view);
        $this->assertEquals($room->id, $room_from_view->id);
    }

    /** @test */
    public function a_guest_cannot_edit_room()
    {
        $room = factory(Room::class)->create();
        $this->patch($this->update_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_edit_room()
    {
        $room = factory(Room::class)->create();
        $this->actingAs($this->employee_read->user)->patch($this->update_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_edit_room($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $room = Room::first();

        $data = $this->update_data();
        $response = $this->actingAs($auth)->patch($this->update_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertCount($this->created_count+1, Room::all());

        $room->refresh()->load(['details', 'discount']);
        $this->assertData($room, $data);
    }





    private function data()
    {
        return [
            "hotel_id" => factory(Hotel::class)->create()->id,
            "name" => "Dr. Dameon Dicki DVM",
            "type" => 5,
            "meal_plan" => 4,
            "info" => "Consequatur expedita id dolorum molestias tempore qui. Impedit nobis eligendi provident qui non sit. Minus inventore magni aut dolor a. Est et saepe eveniet ipsa quasi aut est.",
            "base_rate" => 7.6,
            "price_valid_from" => Carbon::now()->addHour(),
            "price_valid_to" => Carbon::now()->addMonth(),
            "extra_bed_exc" => 3.11,
            "child_free_until" => 8,
            "child_with_two_parents_exc" => 1.54,
            "max_children_with_two_parents" => 9,
            "single_parent_exc" => 7.73,
            "single_parent_child_exc" => 3.63,
            "min_child_age" => 1,
            "max_child_age" => 10,
            "special_offer" => "Qui quis porro corporis voluptatem nulla et sit. Reiciendis cum temporibus expedita sunt non ipsa. Atque delectus minus ea delectus.",
            "discount_type" => 2,
            "discount_value" => 0.08,
        ];
    }

    private function update_data()
    {
        return [
            "hotel_id" => factory(Hotel::class)->create()->id,
            "name" => "Dr. Dameon Dicki DVM updated",
            "type" => 4,
            "meal_plan" => 3,
            "info" => "updated Consequatur expedita id dolorum molestias tempore qui. Impedit nobis eligendi provident qui non sit. Minus inventore magni aut dolor a. Est et saepe eveniet ipsa quasi aut est.",
            "base_rate" => 8.6,
            "price_valid_from" => Carbon::now()->addDay(),
            "price_valid_to" => Carbon::now()->addYear(),
            "extra_bed_exc" => 2.97,
            "child_free_until" => 7,
            "child_with_two_parents_exc" => 5.54,
            "max_children_with_two_parents" => 10,
            "single_parent_exc" => 10.93,
            "single_parent_child_exc" => 4.13,
            "min_child_age" => 2,
            "max_child_age" => 9,
            "special_offer" => "updated Qui quis porro corporis voluptatem nulla et sit. Reiciendis cum temporibus expedita sunt non ipsa. Atque delectus minus ea delectus.",
            "discount_type" => 1,
            "discount_value" => 1.89,
        ];
    }

    private function assertData($room, $data)
    {
        foreach ($data as $key => $value) {
            if(in_array($key, ['hotel_id', 'name', 'type', 'meal_plan', 'info'])){
                $this->assertEquals($value, $room->{$key});
            }elseif(in_array($key, ['room_id', 'base_rate', 'price_valid_from', 'price_valid_to', 'extra_bed_exc', 'child_free_until', 'child_with_two_parents_exc', 'max_children_with_two_parents', 'single_parent_exc', 'single_parent_child_exc', 'min_child_age', 'max_child_age', 'special_offer'])){
                $this->assertEquals($value, $room->details->{$key});
            }elseif(in_array($key, ['discount_type', 'discount_value'])){
                if($key == 'discount_type'){
                    $this->assertEquals($value, $room->discount->type);
                }else{
                    $this->assertEquals($value, $room->discount->value);
                }
            }
        }
    }
}
