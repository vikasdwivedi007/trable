<?php

namespace Tests\Feature;

use App\Models\Airport;
use App\Models\Flight;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Artisan;
use Tests\TestCase;

class FlightTest extends TestCase
{
    use RefreshDatabase;

    private $admin;
    private $employee_read;
    private $employee_write;
    private $created_count = 0;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->index_route = route('flights.index');
        $this->create_route = route('flights.create');
        $this->store_route = route('flights.store');
        $this->edit_route = route('flights.edit', ['flight'=>1]);
        $this->update_route = route('flights.update', ['flight'=>1]);

        Artisan::call('testlogs:clear');
        $this->admin = $this->createAdminEmployee();
        $this->employee_write = $this->createEmployeeWithPermission(Flight::PERMISSION_NAME, 'write');
        $this->employee_read = $this->createEmployeeWithPermission(Flight::PERMISSION_NAME, 'read');
    }

    /** @test */
    public function a_guest_is_redirected_to_login()
    {
        $this->get($this->index_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_is_forbidden()
    {
        $this->actingAs($this->employee_write->user)->get($this->index_route)->assertForbidden();
    }

    /**
     *
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_flights_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $count = 3;
        $flights = factory(Flight::class, $count)->create();
        $response = $this->actingAs($auth)->get($this->index_route);

        $response->assertOk();
        $response->assertViewIs('flights.index');

        $flights_from_view = $this->getDataFromResponse($response, 'flights');
        $this->assertNotNull($flights_from_view);
        $this->assertCount($count, $flights_from_view);
        $this->assertCount($count, Flight::all());
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_paginate_flights($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $all_count = 10;
        $per_page = 3;
        $flights = factory(Flight::class, $all_count)->create();

        $next_page = '';
        $remaining = $all_count;
        $ids = [];
        for ($i=1;$i<=$all_count;$i+=$per_page){
            $url_query = 'per_page='.$per_page;
            $url = $this->index_route;
            if($next_page){
                $url = $next_page;
                $url_query = '&'.$url_query;
            }else{
                $url_query = '?'.$url_query;
            }
            $url .= $url_query;
            $response = $this->actingAs($auth)->get($url);

            $response->assertOk();
            $response->assertViewIs('flights.index');

            $flights_from_view = $this->getDataFromResponse($response, 'flights');

            //make sure that no raw is sent twice when paginating
            $diff = (array_diff($ids, $flights_from_view->pluck('id')->toArray()));
            $this->assertEquals($diff, $ids);
            $ids = array_merge($ids, $flights_from_view->pluck('id')->toArray());

            $this->assertNotNull($flights_from_view);
            $next_page = $flights_from_view->toArray()['next_page_url'];

            //assert that we got the expected number of raws
            $count_should_be = $remaining >= $per_page ? $per_page : $remaining;
            $remaining -= count($flights_from_view);
//            $this->assertCount($count_should_be, $flights_from_view);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_search_flight_by_name($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $loops = 13;
        for ($i=0;$i<$loops;$i++){
            $flights = factory(Flight::class, 20)->create();

            $rand_fl = $flights->toArray()[rand(0,9)];
            $rand_name = $rand_fl['number'];
            $rand_word = Arr::random(explode(' ', $rand_name));
            $url_query = '?filter_by=number&filter_q='.$rand_word;

            $response = $this->actingAs($auth)->get($this->index_route.$url_query);

            $response->assertOk();
            $response->assertViewIs('flights.index');

            $flights_from_view = $this->getDataFromResponse($response, 'flights');
            $this->assertNotNull($flights_from_view);
            $this->assertGreaterThan(0, count($flights_from_view));

            //assert searched name exists in the result
            foreach($flights_from_view as $flight){
                $this->assertStringContainsStringIgnoringCase($rand_word, $flight->number);
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_sort_flights($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        for ($z=0;$z<10;$z++){
            $all_count = 10;
            $flights = factory(Flight::class, $all_count)->create();
            $param = 'date';
            $order = 'ASC';
            $url_query = '?order_by='.$param.'&order='.$order;

            $response = $this->actingAs($auth)->get($this->index_route.$url_query);
            $response->assertOk();
            $response->assertViewIs('flights.index');

            $flights_from_view = $this->getDataFromResponse($response, 'flights');
            $this->assertNotNull($flights_from_view);
            $this->assertGreaterThan(0, count($flights_from_view));

            $flights = $flights_from_view->toArray()['data'];
            for ($i=0;$i<count($flights);$i++){
                if($i > 0){
                    if($order == 'ASC'){
                        $this->lessThanOrEqual($flights[$i-1][$param], $flights[$i][$param]);
                    }else{
                        $this->greaterThanOrEqual($flights[$i-1][$param], $flights[$i][$param]);
                    }
                }
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_delete_flight($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $flight = Flight::first();

        $response = $this->actingAs($auth)->delete($flight->deletePath());
        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $this->assertNull(Flight::find($flight->id));
        $response->assertSessionHas('success');
    }

    /** @test */
    public function a_guest_cannot_delete_flight()
    {
        $flight = factory(Flight::class)->create();
        $this->delete($flight->deletePath())->assertRedirect(route('login'));
        $this->assertNotNull(Flight::find($flight->id));
    }

    /** @test */
    public function user_without_permission_cannot_delete_flight()
    {
        $flight = factory(Flight::class)->create();
        $this->actingAs($this->employee_read->user)->delete($flight->deletePath())->assertForbidden();
        $this->assertNotNull(Flight::find($flight->id));
    }

    /** @test */
    public function a_guest_cannot_see_add_flight_page()
    {
        $this->get($this->create_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_add_flight_page()
    {
        $this->actingAs($this->employee_read->user)->get($this->create_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_add_flight_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $response = $this->actingAs($auth)->get($this->create_route);
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('flights.create');
    }

    /** @test */
    public function a_guest_cannot_add_flight()
    {
        $this->post($this->store_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_add_flight()
    {
        $this->actingAs($this->employee_read->user)->post($this->store_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_add_flight($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertEquals($this->created_count+1, Flight::count());

        $flight = Flight::find($this->created_count+1);
        $this->assertData($flight, $data);
    }

    /** @test */
    public function a_guest_cannot_see_edit_flight_page()
    {
        $flight = factory(Flight::class)->create();
        $this->get($flight->editPath())->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_edit_flight_page()
    {
        $flight = factory(Flight::class)->create();
        $this->actingAs($this->employee_read->user)->get($flight->editPath())->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_edit_flight_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $flight = factory(Flight::class)->create();
        $response = $this->actingAs($auth)->get($flight->editPath());
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('flights.edit');
        $flight_from_view = $this->getDataFromResponse($response, 'flight');
        $this->assertNotNull($flight_from_view);
        $this->assertEquals($flight->id, $flight_from_view->id);
    }

    /** @test */
    public function a_guest_cannot_edit_flight()
    {
        $flight = factory(Flight::class)->create();
        $this->patch($this->update_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_edit_flight()
    {
        $flight = factory(Flight::class)->create();
        $this->actingAs($this->employee_read->user)->patch($this->update_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_edit_flight($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $flight = Flight::first();

        $data = $this->update_data();
        $response = $this->actingAs($auth)->patch($this->update_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertCount($this->created_count+1, Flight::all());

        $flight->refresh();
        $this->assertData($flight, $data);
    }

    /** @test */
    public function user_can_search_for_airport()
    {
        $auth = $this->admin->user;
        $count = 20;
        $airports = factory(Airport::class, $count)->create();
        $rand_airport = $airports[rand(0,$count-1)];
        $rand_word = $rand_airport->iata.' '.$rand_airport->city;
        $search_by = $rand_word;
        $url = route('airports.search', ['search_by'=>$search_by]);
        $response = $this->actingAs($auth)->post($url);
        $response->assertSessionHasNoErrors();
        $response->assertOk();
        $content = $response->decodeResponseJson();
        $this->assertNotEmpty($content);
        $this->assertEquals($rand_airport->id, $content[0]['id']);
    }




    private function data()
    {
        return [
            'number' => \Illuminate\Support\Str::random(10),
            'date' => \Carbon\Carbon::now()->addDay()->format('d-m-Y'),
            'from' => factory(\App\Models\Airport::class)->create()->id,
            'to' => factory(\App\Models\Airport::class)->create()->id,
            'depart_at' => \Carbon\Carbon::now()->format('d-m-Y H:i'),
            'arrive_at' => \Carbon\Carbon::now()->addHours(3)->format('d-m-Y H:i'),
            'reference' => \Illuminate\Support\Str::random(10),
            'seats_count' => rand(1, 10),
            'buy_price' => rand(100, 200),
            'sell_price_vat_exc' => rand(200, 300)
        ];
    }

    private function update_data()
    {
        return [
            'number' => \Illuminate\Support\Str::random(10),
            'date' => \Carbon\Carbon::now()->addDays(2)->format('d-m-Y'),
            'from' => factory(\App\Models\Airport::class)->create()->id,
            'to' => factory(\App\Models\Airport::class)->create()->id,
            'depart_at' => \Carbon\Carbon::now()->addDay(2)->format('d-m-Y H:i'),
            'arrive_at' => \Carbon\Carbon::now()->addDay(2)->addHours(5)->format('d-m-Y H:i'),
            'reference' => \Illuminate\Support\Str::random(10),
            'seats_count' => rand(1, 10),
            'buy_price' => rand(150, 250),
            'sell_price_vat_exc' => rand(250, 350)
        ];
    }

    private function assertData($flight, $data)
    {
        foreach ($data as $key => $value) {
            if(in_array($key, ['date', 'depart_at', 'arrive_at'])){
                if($key == 'date'){
                    $date = (new \DateTime($flight->date))->format('d-m-Y');
                }else{
                    $date = (new \DateTime($flight->{$key}))->format('d-m-Y H:i');
                }
                $this->assertEquals($value, $date);
            }else{
                $this->assertEquals($value, $flight->{$key});
            }
        }
    }
}
