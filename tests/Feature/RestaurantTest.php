<?php

namespace Tests\Feature;

use App\Models\City;
use App\Models\Restaurant;
use App\Models\RestaurantMenu;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Artisan;
use Tests\TestCase;

class RestaurantTest extends TestCase
{
    use RefreshDatabase;

    private $admin;
    private $employee_read;
    private $employee_write;
    private $created_count = 0;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->index_route = route('restaurants.index');
        $this->create_route = route('restaurants.create');
        $this->store_route = route('restaurants.store');
        $this->edit_route = route('restaurants.edit', ['restaurant'=>1]);
        $this->update_route = route('restaurants.update', ['restaurant'=>1]);

        Artisan::call('testlogs:clear');
        $this->admin = $this->createAdminEmployee();
        $this->employee_write = $this->createEmployeeWithPermission(Restaurant::PERMISSION_NAME, 'write');
        $this->employee_read = $this->createEmployeeWithPermission(Restaurant::PERMISSION_NAME, 'read');
    }

    /** @test */
    public function a_guest_is_redirected_to_login()
    {
        $this->get($this->index_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_is_forbidden()
    {
        $this->actingAs($this->employee_write->user)->get($this->index_route)->assertForbidden();
    }

    /**
     *
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_restaurants_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $count = 3;
        $restaurants = factory(Restaurant::class, $count)->create();
        $response = $this->actingAs($auth)->get($this->index_route);

        $response->assertOk();
        $response->assertViewIs('restaurants.index');

        $restaurants_from_view = $this->getDataFromResponse($response, 'restaurants');
        $this->assertNotNull($restaurants_from_view);
        $this->assertCount($count, $restaurants_from_view);
        $this->assertCount($count, Restaurant::all());
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_paginate_restaurants($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $all_count = 10;
        $per_page = 3;
        $restaurants = factory(Restaurant::class, $all_count)->create();

        $next_page = '';
        $remaining = $all_count;
        $ids = [];
        for ($i=1;$i<=$all_count;$i+=$per_page){
            $url_query = 'per_page='.$per_page;
            $url = $this->index_route;
            if($next_page){
                $url = $next_page;
                $url_query = '&'.$url_query;
            }else{
                $url_query = '?'.$url_query;
            }
            $url .= $url_query;
            $response = $this->actingAs($auth)->get($url);

            $response->assertOk();
            $response->assertViewIs('restaurants.index');

            $restaurants_from_view = $this->getDataFromResponse($response, 'restaurants');

            //make sure that no raw is sent twice when paginating
            $diff = (array_diff($ids, $restaurants_from_view->pluck('id')->toArray()));
            $this->assertEquals($diff, $ids);
            $ids = array_merge($ids, $restaurants_from_view->pluck('id')->toArray());

            $this->assertNotNull($restaurants_from_view);
            $next_page = $restaurants_from_view->toArray()['next_page_url'];

            //assert that we got the expected number of raws
            $count_should_be = $remaining >= $per_page ? $per_page : $remaining;
            $remaining -= count($restaurants_from_view);
            $this->assertCount($count_should_be, $restaurants_from_view);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_search_restaurant_by_name($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $loops = 13;
        for ($i=0;$i<$loops;$i++){
            $restaurants = factory(Restaurant::class, 20)->create();

            $rand_rest = $restaurants->toArray()[rand(0,9)];
            $rand_name = $rand_rest['name'];
            $rand_word = Arr::random(explode(' ', $rand_name));
            $url_query = '?filter_by=name&filter_q='.$rand_word;

            $response = $this->actingAs($auth)->get($this->index_route.$url_query);

            $response->assertOk();
            $response->assertViewIs('restaurants.index');

            $restaurants_from_view = $this->getDataFromResponse($response, 'restaurants');
            $this->assertNotNull($restaurants_from_view);
            $this->assertGreaterThan(0, count($restaurants_from_view));

            //assert searched name exists in the result
            foreach($restaurants_from_view as $restaurant){
                $this->assertStringContainsStringIgnoringCase($rand_word, $restaurant->name);
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_sort_restaurants($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        for ($z=0;$z<10;$z++){
            $all_count = 10;
            $restaurants = factory(Restaurant::class, $all_count)->create();
            $param = 'name';
            $order = 'ASC';
            $url_query = '?order_by='.$param.'&order='.$order;

            $response = $this->actingAs($auth)->get($this->index_route.$url_query);
            $response->assertOk();
            $response->assertViewIs('restaurants.index');

            $restaurants_from_view = $this->getDataFromResponse($response, 'restaurants');
            $this->assertNotNull($restaurants_from_view);
            $this->assertGreaterThan(0, count($restaurants_from_view));

            $restaurants = $restaurants_from_view->toArray()['data'];
            for ($i=0;$i<count($restaurants);$i++){
                if($i > 0){
                    if($order == 'ASC'){
                        $this->lessThanOrEqual($restaurants[$i-1][$param], $restaurants[$i][$param]);
                    }else{
                        $this->greaterThanOrEqual($restaurants[$i-1][$param], $restaurants[$i][$param]);
                    }
                }
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_delete_restaurant($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $restaurant = Restaurant::first();

        $response = $this->actingAs($auth)->delete($restaurant->deletePath());
        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $this->assertNull(Restaurant::find($restaurant->id));
        $response->assertSessionHas('success');
        $this->assertEquals(0, RestaurantMenu::count());
    }

    /** @test */
    public function a_guest_cannot_delete_restaurant()
    {
        $restaurant = factory(Restaurant::class)->create();
        $this->delete($restaurant->deletePath())->assertRedirect(route('login'));
        $this->assertNotNull(Restaurant::find($restaurant->id));
    }

    /** @test */
    public function user_without_permission_cannot_delete_restaurant()
    {
        $restaurant = factory(Restaurant::class)->create();
        $this->actingAs($this->employee_read->user)->delete($restaurant->deletePath())->assertForbidden();
        $this->assertNotNull(Restaurant::find($restaurant->id));
    }

    /** @test */
    public function a_guest_cannot_see_add_restaurant_page()
    {
        $this->get($this->create_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_add_restaurant_page()
    {
        $this->actingAs($this->employee_read->user)->get($this->create_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_add_restaurant_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $response = $this->actingAs($auth)->get($this->create_route);
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('restaurants.create');
        $cities = $this->getDataFromResponse($response, 'cities');
        $this->assertNotNull($cities);
    }

    /** @test */
    public function a_guest_cannot_add_restaurant()
    {
        $this->post($this->store_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_add_restaurant()
    {
        $this->actingAs($this->employee_read->user)->post($this->store_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_add_restaurant($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertEquals($this->created_count+1, Restaurant::count());

        $restaurant = Restaurant::find($this->created_count+1)->load('menus');
        $this->assertData($restaurant, $data);
    }

    /** @test */
    public function a_guest_cannot_see_edit_restaurant_page()
    {
        $restaurant = factory(Restaurant::class)->create();
        $this->get($restaurant->editPath())->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_edit_restaurant_page()
    {
        $restaurant = factory(Restaurant::class)->create();
        $this->actingAs($this->employee_read->user)->get($restaurant->editPath())->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_edit_restaurant_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $restaurant = factory(Restaurant::class)->create();
        $response = $this->actingAs($auth)->get($restaurant->editPath());
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('restaurants.edit');
        $restaurant_from_view = $this->getDataFromResponse($response, 'restaurant');
        $cities = $this->getDataFromResponse($response, 'cities');
        $this->assertNotNull($cities);
        $this->assertNotNull($restaurant_from_view);
        $this->assertEquals($restaurant->id, $restaurant_from_view->id);
    }

    /** @test */
    public function a_guest_cannot_edit_restaurant()
    {
        $restaurant = factory(Restaurant::class)->create();
        $this->patch($this->update_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_edit_restaurant()
    {
        $restaurant = factory(Restaurant::class)->create();
        $this->actingAs($this->employee_read->user)->patch($this->update_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_edit_restaurant($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $restaurant = Restaurant::first();

        $data = $this->update_data();
        $response = $this->actingAs($auth)->patch($this->update_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertCount($this->created_count+1, Restaurant::all());

        $restaurant->refresh()->load('menus');
        $this->assertData($restaurant, $data);
    }




    private function data()
    {
        return [
            'name' => 'Restaurant Test',
            'phone' => '01142558214',
            'email' => 'restauranttest@gmail.com',
            'contact_name' => 'Ahmed Sabbagh',
            'contact_phone' => '01023068346',
            'contact_email' => 'ahmedsabbagh1192@gmail.com',
            'city_id' => factory(City::class)->create()->id,
            'address' => 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa',
            'menus' => [
                ['name'=> 'menu1', 'buy_price'=>10.5, 'sell_price_vat_exc'=>15.9, 'items'=>'1Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi.'],
                ['name'=> 'menu2', 'buy_price'=>11.2, 'sell_price_vat_exc'=>17.4, 'items'=>'2Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi.'],
                ['name'=> 'menu3', 'buy_price'=>13.1, 'sell_price_vat_exc'=>18.1, 'items'=>'3Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi.'],
            ]
        ];
    }

    private function update_data()
    {
        return [
            'name' => 'Restaurant Test updated',
            'phone' => '011425582144',
            'email' => 'restauranttestupdated@gmail.com',
            'contact_name' => 'Ahmed Sabbagh updated',
            'contact_phone' => '010230683466',
            'contact_email' => 'ahmedsabbagh1192updated@gmail.com',
            'city_id' => factory(City::class)->create()->id,
            'address' => 'updated Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa',
            'menus' => [
                ['id'=>3,'name'=> 'menu3', 'buy_price'=>16.1, 'sell_price_vat_exc'=>18.1, 'items'=>'updated 3Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi.'],
                ['name'=> 'menu4', 'buy_price'=>20.2, 'sell_price_vat_exc'=>30.1, 'items'=>'4Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi.'],
            ]
        ];
    }

    private function assertData($restaurant, $data)
    {
        foreach ($data as $key => $value) {
            if($key == 'menus'){
                $count = count($data[$key]);
                $this->assertEquals($count, RestaurantMenu::count());
                foreach($data['menus'] as $menu){
                    if(isset($menu['id'])){
                        $menu_db = RestaurantMenu::find($menu['id']);
                        $this->assertNotNull($menu_db);
                        $this->assertEquals($restaurant->id, $menu_db->restaurant_id);
                        $this->assertEquals($menu['name'], $menu_db->name);
                        $this->assertEquals($menu['buy_price'], $menu_db->buy_price);
                        $this->assertEquals($menu['sell_price_vat_exc'], $menu_db->sell_price_vat_exc);
                        $this->assertEquals($menu['items'], $menu_db->items);
                    }else{
                        $menu_db = RestaurantMenu::where('name', $menu['name'])->first();
                        $this->assertNotNull($menu_db);
                        $this->assertEquals($restaurant->id, $menu_db->restaurant_id);
                        $this->assertEquals($menu['name'], $menu_db->name);
                        $this->assertEquals($menu['buy_price'], $menu_db->buy_price);
                        $this->assertEquals($menu['sell_price_vat_exc'], $menu_db->sell_price_vat_exc);
                        $this->assertEquals($menu['items'], $menu_db->items);
                    }
                }
            }else{
                $this->assertEquals($value, $restaurant->{$key});
            }
        }
    }
}
