<?php

namespace Tests\Feature;

use App\Models\City;
use App\Models\Department;
use App\Models\Employee;
use App\Models\JobTitle;
use App\Models\Language;
use App\Models\Role;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Queue\Jobs\Job;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Queue;
use Tests\TestCase;

class EmployeeTest extends TestCase
{

    use RefreshDatabase;

    private $admin;
    private $employee_read;
    private $employee_write;
    private $created_count = 3;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->index_route = route('employees.index');
        $this->create_route = route('employees.create');
        $this->store_route = route('employees.store');
        $this->edit_route = route('employees.edit', ['employee' => $this->created_count + 1]);
        $this->update_route = route('employees.update', ['employee' => $this->created_count + 1]);
        $this->sort_route = route('employees.sort');
        $this->activate_route = route('employees.activate', ['employee' => $this->created_count + 1]);
        $this->deactivate_route = route('employees.deactivate', ['employee' => $this->created_count + 1]);

        Artisan::call('testlogs:clear');
        $this->admin = $this->createAdminEmployee();
        $this->employee_write = $this->createEmployeeWithPermission(Employee::PERMISSION_NAME, 'write');
        $this->employee_read = $this->createEmployeeWithPermission(Employee::PERMISSION_NAME, 'read');
    }

    /** @test */
    public function a_guest_is_redirected_to_login()
    {
        $this->get($this->index_route)->assertRedirect(route('login'));
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_employees_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $count = 3;
        $employees = factory(Employee::class, $count)->create();
        $response = $this->actingAs($auth)->get($this->index_route);
        $response->assertOk();
        $employees_from_view = $this->getDataFromDatatableResponse($response);
        $this->assertNotNull($employees_from_view);
        $this->assertCount($count + $this->created_count, Employee::all());
    }

    /** @test */
    public function user_without_permission_cannot_see_employees_page()
    {
        $response = $this->actingAs($this->employee_write->user)->get($this->index_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_search_employees_by_name($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $can_search_by = (new Employee())->can_search_by;
        $can_search_by = array_map(function ($item) {
            return str_replace('employees.', '', $item);
        }, $can_search_by);
        for ($i = 0; $i < 13; $i++) {
            $employees = factory(Employee::class, 20)->create()->load('user');

            $rand_emp = $employees->toArray()[rand(0, 9)];
            $rand_emp = $rand_emp['user'];
            $rand_name = $rand_emp['name'];
            $rand_word = Arr::random(explode(' ', $rand_name));
            $url_query = '?search[value]=' . $rand_word;

            $response = $this->actingAs($auth)->get($this->index_route . $url_query);
            $response->assertOk();
            $employees_from_view = $this->getDataFromDatatableResponse($response);
            $this->assertNotNull($employees_from_view);
            $this->assertGreaterThan(0, count($employees_from_view));
            //assert searched name exists in the result
            foreach ($employees_from_view as $emp) {
                $found = 0;
                foreach ($can_search_by as $key) {
                    if (stripos($key, '.') !== false) {
                        $parts = explode('.', $key);
                        if (stripos($emp->{$parts[0]}->{$parts[1]}, $rand_word) !== false) {
                            $found++;
                        }
                    } elseif (stripos($emp->{$key}, $rand_word) !== false) {
                        $found++;
                    }
                }
                $this->assertGreaterThan(0, $found);
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_paginate_employees($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $all_count = 13;
        $per_page = 3;
        $emps = factory(Employee::class, $all_count - 3)->create();
        $next_page = '';
        $remaining = $all_count;
        $ids = [];
        for ($i = 0; $i < $all_count; $i += $per_page) {
            $url_query = '?length=' . $per_page . '&start=' . $i;
            $url = $this->index_route;
            $url .= $url_query;
            $response = $this->actingAs($auth)->get($url);

            $response->assertOk();
            $employees_from_view = $this->getDataFromDatatableResponse($response);
            //make sure that no raw is sent twice when paginating
            $diff = (array_diff($ids, $employees_from_view->pluck('id')->toArray()));
            $this->assertEquals($diff, $ids);
            $ids = array_merge($ids, $employees_from_view->pluck('id')->toArray());

            $this->assertNotNull($employees_from_view);
            //assert that we got the expected number of raws
            $count_should_be = $remaining >= $per_page ? $per_page : $remaining;
            $remaining -= count($employees_from_view);
            $this->assertCount($count_should_be, $employees_from_view);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_sort_employees_by_employees_info($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        for ($z = 0; $z < 10; $z++) {
            $all_count = 10;
            $users = factory(User::class, 3)->create();
            $emps = factory(Employee::class, $all_count)->create();
            $param = 'user.name';
            $url_query = '?order[0][dir]=asc&order[0][column]=0&columns[0][data]=' . $param;

            $response = $this->actingAs($auth)->get($this->index_route . $url_query);
            $response->assertOk();

            $employees_from_view = $this->getDataFromDatatableResponse($response);
            $this->assertNotNull($employees_from_view);
            $this->assertGreaterThan(0, count($employees_from_view));

            $emps = $employees_from_view;
            for ($i = 0; $i < count($emps); $i++) {
                if ($i > 0) {
                    if (stripos($param, '.') !== false) {
                        $parts = explode('.', $param);
                        $this->greaterThanOrEqual($emps->get($i - 1)->{$parts[0]}->{$parts[1]}, $emps->get($i)->{$parts[0]}->{$parts[1]});
                    } else {
                        $this->greaterThanOrEqual($emps->get($i - 1)->{$param}, $emps->get($i)->{$param});
                    }
                }
            }
        }
    }

    /** @test */
    public function a_guest_cannot_delete_employee()
    {
        $employee = factory(Employee::class)->create();
        $this->delete($employee->deletePath())->assertRedirect(route('login'));
        $this->assertNotNull(Employee::find($employee->id));
    }

    /** @test */
    public function user_without_permission_cannot_delete_employee()
    {
        $employee = factory(Employee::class)->create();
        $response = $this->actingAs($this->employee_read->user)->delete($employee->deletePath())->assertForbidden();
        $this->assertNotNull(Employee::find($employee->id));
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_delete_employee($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $employee = factory(Employee::class)->create()->load('user');
        $team = factory(Employee::class, 10)->create(['supervisor_id' => $employee->job_id]);
        $response = $this->actingAs($auth)->delete($employee->deletePath());
        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $this->assertNull(Employee::find($employee->id));
        $this->assertNull(User::find($employee->user->id));
        $response->assertSessionHas('success');
        $team->map->refresh();
        foreach ($team as $member) {
            $this->assertNotNull($member->supervisor_id);
        }
    }

    /** @test */
    public function a_guest_cannot_see_add_employee_page()
    {
        $this->get($this->create_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_add_employee_page()
    {
        $this->actingAs($this->employee_read->user)->get($this->create_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_add_employee_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $response = $this->actingAs($auth)->get($this->create_route);
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('employees.create');
        $departments = $this->getDataFromResponse($response, 'departments');
        $cities = $this->getDataFromResponse($response, 'cities');
        $job_titles = $this->getDataFromResponse($response, 'job_titles');
        $languages = $this->getDataFromResponse($response, 'languages');
        $permissions = $this->getDataFromResponse($response, 'permissions');
        $this->assertNotNull($departments);
        $this->assertNotNull($cities);
        $this->assertNotNull($job_titles);
        $this->assertNotNull($languages);
        $this->assertNotNull($permissions);
        foreach ($departments as $department) {
            $this->assertEquals(1, $department->active);
        }
    }

    /** @test */
    public function a_guest_cannot_add_employee()
    {
        $this->post($this->store_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_add_employee()
    {
        $this->actingAs($this->employee_read->user)->post($this->store_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_add_employee_with_no_supervisor($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $init_data = $this->init_data();
        $data = array_merge($this->data(), $init_data);
        $response = $this->actingAs($auth)->post($this->store_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertEquals($this->created_count + 1, Employee::count());
        $this->assertEquals(1, Queue::size());

        $emp = Employee::find($this->created_count + 1)->load('user');
        $this->assertNotNull($emp->user);
        $this->assertEmployeeData($emp, $data);
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_add_employee_with_supervisor($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $init_data = $this->init_data(true);
        $data = array_merge($this->data(), $init_data);
        $response = $this->actingAs($auth)->post($this->store_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        //3 because we created admin then supervisor then the emp
        $this->assertCount($this->created_count + 2, Employee::all());
        $this->assertEquals(1, Queue::size());

        $emp = Employee::find($this->created_count + 2)->load('user');
        $this->assertNotNull($emp->user);
        $this->assertEmployeeData($emp, $data);
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_add_employee_with_new_job_title($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $init_data = $this->init_data();
        $data = array_merge($this->data(), $init_data);
        $new_job_title = 'new Job Title';
        $data = array_merge($data, ['job_id' => null, 'job_title' => $new_job_title]);
        $response = $this->actingAs($auth)->post($this->store_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertEquals($this->created_count + 1, Employee::count());
        $this->assertEquals(1, Queue::size());

        $emp = Employee::find($this->created_count + 1)->load('user');
        $this->assertNotNull($emp->user);
        $this->assertEmployeeData($emp, Arr::except($data, ['job_id', 'job_title']));
        $new_job_obj = JobTitle::where('title', $new_job_title)->first();
        $this->assertNotNull($new_job_obj);
        $this->assertEquals($emp->job_id, $new_job_obj->id);
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_add_employee_with_existing_job_title($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $init_data = $this->init_data();
        $data = array_merge($this->data(), $init_data);
        $existing_job_title = JobTitle::first()->title;
        $data = array_merge($data, ['job_id' => null, 'job_title' => $existing_job_title]);
        $response = $this->actingAs($auth)->post($this->store_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertEquals($this->created_count + 1, Employee::count());
        $this->assertEquals(1, Queue::size());

        $emp = Employee::find($this->created_count + 1)->load('user');
        $this->assertNotNull($emp->user);
        $this->assertEmployeeData($emp, Arr::except($data, ['job_id', 'job_title']));
        $existing_job_obj = JobTitle::where('title', $existing_job_title)->first();
        $this->assertNotNull($existing_job_obj);
        $this->assertEquals($emp->job_id, $existing_job_obj->id);
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function should_prioritize_job_id_over_job_title_from_user_with_permission_in_employee_create($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $init_data = $this->init_data();
        $data = array_merge($this->data(), $init_data);
        $new_job_title = 'new Job Title';
        $existing_job = JobTitle::first();
        $data = array_merge($data, ['job_id' => $existing_job->id, 'job_title' => $new_job_title]);
        $response = $this->actingAs($auth)->post($this->store_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertEquals($this->created_count + 1, Employee::count());
        $this->assertEquals(1, Queue::size());

        $emp = Employee::find($this->created_count + 1)->load('user');
        $this->assertNotNull($emp->user);
        $this->assertEmployeeData($emp, Arr::except($data, ['job_title']));
        $new_job_obj = JobTitle::where('title', $new_job_title)->first();
        $this->assertNull($new_job_obj);
    }


    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_cannot_add_general_manager($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $init_data = $this->init_data();
        $data = array_merge($this->data(), $init_data);
        $general_manager_job = factory(JobTitle::class)->create(['title' => JobTitle::GENERAL_MANAGER_TITLE]);
        $data = array_merge($data, ['job_id' => $general_manager_job->id]);
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $response->assertSessionHasErrors('job_id');
        $this->assertEquals($this->created_count, Employee::count());
        $this->assertEquals($this->created_count, User::count());
        $this->assertOldInput(Arr::except($data, ['user_id', 'job_id', 'job_title', 'supervisor_id']));
    }

    /** @test */
    public function a_guest_cannot_see_edit_employee_page()
    {
        $employee = factory(Employee::class)->create();
        $this->get($employee->editPath())->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_edit_employee_page()
    {
        $employee = factory(Employee::class)->create();
        $this->actingAs($this->employee_read->user)->get($employee->editPath())->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_edit_employee_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $employee = factory(Employee::class)->create();
        $response = $this->actingAs($auth)->get($employee->editPath());
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('employees.edit');
        $departments = $this->getDataFromResponse($response, 'departments');
        $cities = $this->getDataFromResponse($response, 'cities');
        $job_titles = $this->getDataFromResponse($response, 'job_titles');
        $languages = $this->getDataFromResponse($response, 'languages');
        $permissions = $this->getDataFromResponse($response, 'permissions');
        $employee_from_view = $this->getDataFromResponse($response, 'employee');
        $this->assertNotNull($departments);
        $this->assertNotNull($cities);
        $this->assertNotNull($job_titles);
        $this->assertNotNull($languages);
        $this->assertNotNull($permissions);
        $this->assertNotNull($employee_from_view);
        $this->assertEquals($employee->id, $employee_from_view->id);
        foreach ($departments as $department) {
            $this->assertEquals(1, $department->active);
        }
    }

    /** @test */
    public function a_guest_cannot_edit_employee()
    {
        $employee = factory(Employee::class)->create();
        $this->patch($this->update_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_edit_employee()
    {
        $employee = factory(Employee::class)->create();
        $this->actingAs($this->employee_read->user)->patch($this->update_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_edit_employee($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $employee = factory(Employee::class)->create()->load('user');

        $init_data = $this->init_data();
        $data = array_merge($this->data(), $init_data);
        $response = $this->actingAs($auth)->patch($this->update_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertCount($this->created_count + 1, Employee::all());
        $this->assertCount($this->created_count + 1, User::all());

        $emp = $employee->refresh()->load('user');
        $this->assertNotNull($emp->user);
        $this->assertEmployeeData($emp, $data);
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_edit_employee_with_new_job_title($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $employee = factory(Employee::class)->create()->load('user');

        $init_data = $this->init_data();
        $data = array_merge($this->data(), $init_data);
        $new_job_title = 'new Job Title';
        $data = array_merge($data, ['job_id' => null, 'job_title' => $new_job_title]);
        $response = $this->actingAs($auth)->patch($this->update_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertCount($this->created_count + 1, Employee::all());
        $this->assertCount($this->created_count + 1, User::all());

        $emp = $employee->refresh()->load('user');
        $this->assertNotNull($emp->user);

        $this->assertEmployeeData($emp, Arr::except($data, ['job_id', 'job_title']));
        $new_job_obj = JobTitle::where('title', $new_job_title)->first();
        $this->assertNotNull($new_job_obj);
        $this->assertEquals($emp->job_id, $new_job_obj->id);
    }

    /** @test */
    public function a_guest_cannot_activate_or_deactivate_employee()
    {
        $employee = factory(Employee::class)->create();
        $this->get($this->activate_route)->assertRedirect(route('login'));
        $this->get($this->deactivate_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_activate_or_deactivate_employee()
    {
        $employee = factory(Employee::class)->create();
        $this->actingAs($this->employee_read->user)->get($this->activate_route)->assertForbidden();
        $this->actingAs($this->employee_read->user)->get($this->deactivate_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_deactivate_employee($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $employee = factory(Employee::class)->create();
        $response = $this->actingAs($auth)->get($this->deactivate_route);
        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $this->assertEquals(0, $employee->fresh()->active);
        $response->assertSessionHas('success');
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_activate_employee($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $employee = factory(Employee::class)->create();
        $response = $this->actingAs($auth)->get($this->deactivate_route);
        $response = $this->actingAs($auth)->get($this->activate_route);
        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $employee->refresh();
        $this->assertEquals(1, $employee->active);
        $response->assertSessionHas('success');
    }


    private function init_data($super = false)
    {
        return [
            'department_id' => factory(Department::class)->create()->id,
            'supervisor_id' => $super ? factory(Employee::class)->create()->job_id : '',
            'job_id' => factory(JobTitle::class)->create()->id,
//            'job_title' => '',
//            'lang_id' => factory(Language::class)->create()->id,
            'city_id' => factory(City::class)->create()->id,
//            'hired_at' => Carbon::now()->subMonth(4),
        ];
    }

    private function data()
    {
        $user_data = factory(User::class)->make()->toArray();
        $emp_data = factory(Employee::class)->make(['user_id' => ''])->toArray();
        $data = array_merge($emp_data, $user_data);
        $data['languages'] = [factory(Language::class)->create()->id];
        $data['salary'] = 'EGP ' . $data['salary'];
        return $data;
    }

    private function assertEmployeeData($emp, $data)
    {
        foreach ($data as $key => $value) {
            if (in_array($key, ['user_id', 'email_verified_at'])) {
                continue;
            }
            if (in_array($key, ['name', 'phone', 'email', 'address'])) {
                $this->assertEquals($value, $emp->user->{$key});
            } elseif ($key == 'languages') {
                $lang_ids = $emp->languages->pluck('id');
                $this->assertEquals($value, $lang_ids->toArray());
            } elseif ($key == 'salary') {
                $this->assertEquals($value, 'EGP ' . $emp->salary);
            } elseif (in_array($key, ['promoted_at', 'hired_at'])) {
                $this->assertEquals($emp->toArray()[$key], $value);
            } else {
                $this->assertEquals($value, $emp->{$key});
            }
        }
    }


}
