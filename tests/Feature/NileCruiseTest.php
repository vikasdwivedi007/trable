<?php

namespace Tests\Feature;

use App\Models\City;
use App\Models\NileCruise;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Artisan;
use Tests\TestCase;

class NileCruiseTest extends TestCase
{
    use RefreshDatabase;

    private $admin;
    private $employee_read;
    private $employee_write;
    private $created_count = 0;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->index_route = route('nile-cruises.index');
        $this->create_route = route('nile-cruises.create');
        $this->store_route = route('nile-cruises.store');
        $this->edit_route = route('nile-cruises.edit', ['nile_cruise'=>1]);
        $this->update_route = route('nile-cruises.update', ['nile_cruise'=>1]);

        Artisan::call('testlogs:clear');
        $this->admin = $this->createAdminEmployee();
        $this->employee_write = $this->createEmployeeWithPermission(NileCruise::PERMISSION_NAME, 'write');
        $this->employee_read = $this->createEmployeeWithPermission(NileCruise::PERMISSION_NAME, 'read');
    }

    /** @test */
    public function a_guest_is_redirected_to_login()
    {
        $this->get($this->index_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_is_forbidden()
    {
        $this->actingAs($this->employee_write->user)->get($this->index_route)->assertForbidden();
    }

    /**
     *
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_nile_cruises_page($auth)
    {
        $this->withoutExceptionHandling();
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $count = 3;
        $nile_cruises = factory(NileCruise::class, $count)->create();
        $response = $this->actingAs($auth)->get($this->index_route);

        $response->assertOk();
        $response->assertViewIs('nile-cruises.index');

        $nile_cruises_from_view = $this->getDataFromResponse($response, 'nile_cruises');
        $this->assertNotNull($nile_cruises_from_view);
        $this->assertCount($count, $nile_cruises_from_view);
        $this->assertCount($count, NileCruise::all());
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_paginate_nile_cruises($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $all_count = 10;
        $per_page = 3;
        $nile_cruises = factory(NileCruise::class, $all_count)->create();

        $next_page = '';
        $remaining = $all_count;
        $ids = [];
        for ($i=1;$i<=$all_count;$i+=$per_page){
            $url_query = 'per_page='.$per_page;
            $url = $this->index_route;
            if($next_page){
                $url = $next_page;
                $url_query = '&'.$url_query;
            }else{
                $url_query = '?'.$url_query;
            }
            $url .= $url_query;
            $response = $this->actingAs($auth)->get($url);

            $response->assertOk();
            $response->assertViewIs('nile-cruises.index');

            $nile_cruises_from_view = $this->getDataFromResponse($response, 'nile_cruises');

            //make sure that no raw is sent twice when paginating
            $diff = (array_diff($ids, $nile_cruises_from_view->pluck('id')->toArray()));
            $this->assertEquals($diff, $ids);
            $ids = array_merge($ids, $nile_cruises_from_view->pluck('id')->toArray());

            $this->assertNotNull($nile_cruises_from_view);
            $next_page = $nile_cruises_from_view->toArray()['next_page_url'];

            //assert that we got the expected number of raws
            $count_should_be = $remaining >= $per_page ? $per_page : $remaining;
            $remaining -= count($nile_cruises_from_view);
            $this->assertCount($count_should_be, $nile_cruises_from_view);
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_search_nile_cruise_by_name($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        $loops = 13;
        for ($i=0;$i<$loops;$i++){
            $nile_cruises = factory(NileCruise::class, 20)->create();

            $rand_rest = $nile_cruises->toArray()[rand(0,9)];
            $rand_name = $rand_rest['name'];
            $rand_word = $rand_name;
            $url_query = '?filter_by=name&filter_q='.$rand_word;

            $response = $this->actingAs($auth)->get($this->index_route.$url_query);

            $response->assertOk();
            $response->assertViewIs('nile-cruises.index');

            $nile_cruises_from_view = $this->getDataFromResponse($response, 'nile_cruises');
            $this->assertNotNull($nile_cruises_from_view);
            $this->assertGreaterThan(0, count($nile_cruises_from_view));

            //assert searched name exists in the result
            foreach($nile_cruises_from_view as $nile_cruise){
                $this->assertStringContainsStringIgnoringCase($rand_word, $nile_cruise->name);
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_sort_nile_cruises($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        for ($z=0;$z<10;$z++){
            $all_count = 10;
            $nile_cruises = factory(NileCruise::class, $all_count)->create();
            $param = 'name';
            $order = 'ASC';
            $url_query = '?order_by='.$param.'&order='.$order;

            $response = $this->actingAs($auth)->get($this->index_route.$url_query);
            $response->assertOk();
            $response->assertViewIs('nile-cruises.index');

            $nile_cruises_from_view = $this->getDataFromResponse($response, 'nile_cruises');
            $this->assertNotNull($nile_cruises_from_view);
            $this->assertGreaterThan(0, count($nile_cruises_from_view));

            $nile_cruises = $nile_cruises_from_view->toArray()['data'];
            for ($i=0;$i<count($nile_cruises);$i++){
                if($i > 0){
                    if($order == 'ASC'){
                        $this->lessThanOrEqual($nile_cruises[$i-1][$param], $nile_cruises[$i][$param]);
                    }else{
                        $this->greaterThanOrEqual($nile_cruises[$i-1][$param], $nile_cruises[$i][$param]);
                    }
                }
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_sort_nile_cruises_by_city($auth)
    {
        $this->withoutExceptionHandling();
        $auth = $auth == 0 ? $this->admin->user : $this->employee_read->user;
        for ($z = 0; $z < 10; $z++) {
            $all_count = 10;
            $nile_cruise = factory(NileCruise::class, $all_count)->create();
            $param = 'name';
            $url_query = '?order_by_r=from_cities.' . $param;

            $response = $this->actingAs($auth)->get(route('nile-cruises.sort') . $url_query);
            $response->assertOk();
            $response->assertViewIs('nile-cruises.index');

            $nile_cruises_from_view = $this->getDataFromResponse($response, 'nile_cruises');
            $this->assertNotNull($nile_cruises_from_view);
            $this->assertGreaterThan(0, count($nile_cruises_from_view));

            $emps = $nile_cruises_from_view->toArray()['data'];
            for ($i = 0; $i < count($emps); $i++) {
                if ($i > 0) {
                    $this->greaterThanOrEqual($emps[$i - 1]['from_city'][$param], $emps[$i]['from_city'][$param]);
                }
            }
        }
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_delete_nile_cruise($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $nile_cruise = NileCruise::first();

        $response = $this->actingAs($auth)->delete($nile_cruise->deletePath());
        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $this->assertNull(NileCruise::find($nile_cruise->id));
        $response->assertSessionHas('success');
    }

    /** @test */
    public function a_guest_cannot_delete_nile_cruise()
    {
        $nile_cruise = factory(NileCruise::class)->create();
        $this->delete($nile_cruise->deletePath())->assertRedirect(route('login'));
        $this->assertNotNull(NileCruise::find($nile_cruise->id));
    }

    /** @test */
    public function user_without_permission_cannot_delete_nile_cruise()
    {
        $nile_cruise = factory(NileCruise::class)->create();
        $this->actingAs($this->employee_read->user)->delete($nile_cruise->deletePath())->assertForbidden();
        $this->assertNotNull(NileCruise::find($nile_cruise->id));
    }

    /** @test */
    public function a_guest_cannot_see_add_nile_cruise_page()
    {
        $this->get($this->create_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_add_nile_cruise_page()
    {
        $this->actingAs($this->employee_read->user)->get($this->create_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_add_nile_cruise_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $response = $this->actingAs($auth)->get($this->create_route);
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('nile-cruises.create');
        $cities = $this->getDataFromResponse($response, 'cities');
        $this->assertNotNull($cities);
    }

    /** @test */
    public function a_guest_cannot_add_nile_cruise()
    {
        $this->post($this->store_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_add_nile_cruise()
    {
        $this->actingAs($this->employee_read->user)->post($this->store_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_add_nile_cruise($auth)
    {
        $this->withoutExceptionHandling();
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertEquals($this->created_count+1, NileCruise::count());
        $nile_cruise = NileCruise::first();
        $this->assertData($nile_cruise, $data);
    }

    /** @test */
    public function a_guest_cannot_see_edit_nile_cruise_page()
    {
        $nile_cruise = factory(NileCruise::class)->create();
        $this->get($nile_cruise->editPath())->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_see_edit_nile_cruise_page()
    {
        $nile_cruise = factory(NileCruise::class)->create();
        $this->actingAs($this->employee_read->user)->get($nile_cruise->editPath())->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_see_edit_nile_cruise_page($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $nile_cruise = factory(NileCruise::class)->create();
        $response = $this->actingAs($auth)->get($nile_cruise->editPath());
        $response->assertSessionHasNoErrors();
        $response->assertViewIs('nile-cruises.edit');
        $nile_cruise_from_view = $this->getDataFromResponse($response, 'nile_cruise');
        $cities = $this->getDataFromResponse($response, 'cities');
        $this->assertNotNull($cities);
        $this->assertNotNull($nile_cruise_from_view);
        $this->assertEquals($nile_cruise->id, $nile_cruise_from_view->id);
    }

    /** @test */
    public function a_guest_cannot_edit_nile_cruise()
    {
        $nile_cruise = factory(NileCruise::class)->create();
        $this->patch($this->update_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function user_without_permission_cannot_edit_nile_cruise()
    {
        $nile_cruise = factory(NileCruise::class)->create();
        $this->actingAs($this->employee_read->user)->patch($this->update_route)->assertForbidden();
    }

    /**
     * @test
     * @dataProvider authUserProvider
     */
    public function user_with_permission_can_edit_nile_cruise($auth)
    {
        $auth = $auth == 0 ? $this->admin->user : $this->employee_write->user;
        $data = $this->data();
        $response = $this->actingAs($auth)->post($this->store_route, $data);
        $nile_cruise = NileCruise::first();

        $data = $this->update_data();
        $response = $this->actingAs($auth)->patch($this->update_route, $data);

        $response->assertSessionHasNoErrors();
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
        $this->assertCount($this->created_count+1, NileCruise::all());

        $nile_cruise->refresh();
        $this->assertData($nile_cruise, $data);
    }




    private function data()
    {
        $data = factory(NileCruise::class)->make()->toArray();
        $data['date_from'] = (new \DateTime($data['date_from']))->format('d-m-Y');
        $data['date_to'] = (new \DateTime($data['date_to']))->format('d-m-Y');
        return $data;
    }

    private function update_data()
    {
        $data = factory(NileCruise::class)->make()->toArray();
        $data['date_from'] = (new \DateTime($data['date_from']))->format('d-m-Y');
        $data['date_to'] = (new \DateTime($data['date_to']))->format('d-m-Y');
        return $data;
    }

    private function assertData($nile_cruise, $data)
    {
        foreach ($data as $key => $value) {
            if($key == 'date_from' || $key == 'date_to'){
                $date = (new \DateTime($nile_cruise->{$key}))->format('d-m-Y');
                $this->assertEquals($data[$key], $date);
            }else{
                $this->assertEquals($value, $nile_cruise->{$key});
            }
        }
    }
}
