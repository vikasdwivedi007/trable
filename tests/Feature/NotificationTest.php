<?php

namespace Tests\Feature;

use App\Models\Notification;
use App\Models\TravelAgent;
use App\Notifications\TestNotification;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Artisan;
use Tests\TestCase;

class NotificationTest extends TestCase
{
    use RefreshDatabase;

    private $admin;
    private $employee;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->index_route = route('notifications.index');
        $this->readAll_route = route('notifications.read-all');

        Artisan::call('testlogs:clear');
        //doesn't matter the roles or perms here, we're just creating two different users
        $this->admin = $this->createAdminEmployee();
        $this->employee = $this->createEmployeeWithPermission(TravelAgent::PERMISSION_NAME, 'read');//any permission
    }

    /** @test */
    public function a_guest_cannot_see_notifications()
    {
        $this->get($this->index_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function admin_can_see_notifications()
    {
        //create one that doesn't belong to admin
        $this->employee->user->notify(new TestNotification());
        //create 5 notifications belong to admin
        $count = 5;
        for ($i = 0; $i < $count; $i++) {
            $this->admin->user->notify(new TestNotification());
        }
        //read one to test unread count
        $this->admin->user->unreadNotifications()->first()->markAsRead();

        $response = $this->actingAs($this->admin->user)->get($this->index_route);
        $response->assertOk();
        $response->assertViewIs('notifications.list');

        $notifications_from_view = $this->getDataFromResponse($response, 'notifications');
        $count_from_view = $this->getDataFromResponse($response, 'count');
        $this->assertNotNull($notifications_from_view);
        $this->assertCount($count, $notifications_from_view);
        $this->assertEquals($count - 1, $count_from_view);
    }

    /** @test */
    public function employee_can_see_notifications()
    {
        //create one that doesn't belong to employee
        $this->admin->user->notify(new TestNotification());
        //create 5 notifications belong to employee
        $count = 5;
        for ($i = 0; $i < $count; $i++) {
            $this->employee->user->notify(new TestNotification());
        }
        //read one to test unread count
        $this->employee->user->unreadNotifications()->first()->markAsRead();

        $response = $this->actingAs($this->employee->user)->get($this->index_route);
        $response->assertOk();
        $response->assertViewIs('notifications.list');

        $notifications_from_view = $this->getDataFromResponse($response, 'notifications');
        $count_from_view = $this->getDataFromResponse($response, 'count');
        $this->assertNotNull($notifications_from_view);
        $this->assertCount($count, $notifications_from_view);
        $this->assertEquals($count - 1, $count_from_view);
    }

    /** @test */
    public function a_guest_cannot_read_all_notifications()
    {
        $this->get($this->readAll_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function admin_can_read_all_notifications()
    {
        //create one that doesn't belong to admin
        $this->employee->user->notify(new TestNotification());
        //create 5 notifications belong to admin
        $count = 5;
        for ($i = 0; $i < $count; $i++) {
            $this->admin->user->notify(new TestNotification());
        }

        $response = $this->actingAs($this->admin->user)->get($this->readAll_route);
        $response->assertOk();
        $response->assertJson(['success'=>true]);

        //assert no unread notifications left
        $this->assertEquals(0, $this->admin->user->unreadNotifications()->count());
        //assert employee still has his unread notification
        $this->assertEquals(1, $this->employee->user->unreadNotifications()->count());
        $this->assertEquals(6, Notification::count());
    }

    /** @test */
    public function employee_can_read_all_notifications()
    {
        //create one that doesn't belong to employee
        $this->admin->user->notify(new TestNotification());
        //create 5 notifications belong to employee
        $count = 5;
        for ($i = 0; $i < $count; $i++) {
            $this->employee->user->notify(new TestNotification());
        }

        $response = $this->actingAs($this->employee->user)->get($this->readAll_route);
        $response->assertOk();
        $response->assertJson(['success'=>true]);

        //assert no unread notifications left
        $this->assertEquals(0, $this->employee->user->unreadNotifications()->count());
        //assert admin still has his unread notification
        $this->assertEquals(1, $this->admin->user->unreadNotifications()->count());
        $this->assertEquals(6, Notification::count());
    }

    /** @test */
    public function a_guest_cannot_read_one_notifications()
    {
        $this->employee->user->notify(new TestNotification());
        $notification = $this->employee->user->unreadNotifications()->first();
        $route = route('notifications.read-one', ['id'=>$notification->id]);
        $this->get($route)->assertRedirect(route('login'));
    }

    /** @test */
    public function admin_can_read_one_notification()
    {
        //create one that doesn't belong to admin
        $this->employee->user->notify(new TestNotification());
        //create 5 notifications belong to admin
        $count = 5;
        for ($i = 0; $i < $count; $i++) {
            $this->admin->user->notify(new TestNotification());
        }
        $notification = $this->admin->user->unreadNotifications()->first();
        $route = route('notifications.read-one', ['id'=>$notification->id]);
        $response = $this->actingAs($this->admin->user)->get($route);
        $response->assertOk();
        $response->assertJson(['success'=>true]);

        //assert no unread notifications left
        $notification->refresh();
        $this->assertNotNull($notification->read_at);
        $this->assertEquals($count-1, $this->admin->user->unreadNotifications()->count());
        $this->assertEquals(1, $this->employee->user->unreadNotifications()->count());
    }

    /** @test */
    public function employee_can_read_one_notification()
    {
        //create one that doesn't belong to employee
        $this->admin->user->notify(new TestNotification());
        //create 5 notifications belong to employee
        $count = 5;
        for ($i = 0; $i < $count; $i++) {
            $this->employee->user->notify(new TestNotification());
        }
        $notification = $this->employee->user->unreadNotifications()->first();
        $route = route('notifications.read-one', ['id'=>$notification->id]);
        $response = $this->actingAs($this->employee->user)->get($route);
        $response->assertOk();
        $response->assertJson(['success'=>true]);

        //assert no unread notifications left
        $notification->refresh();
        $this->assertNotNull($notification->read_at);
        $this->assertEquals($count-1, $this->employee->user->unreadNotifications()->count());
        $this->assertEquals(1, $this->admin->user->unreadNotifications()->count());
    }

    /** @test */
    public function user_cannot_read_notification_was_not_sent_to_him()
    {
        //create one that doesn't belong to admin
        $this->employee->user->notify(new TestNotification());
        //create 5 notifications belong to admin
        $count = 5;
        for ($i = 0; $i < $count; $i++) {
            $this->admin->user->notify(new TestNotification());
        }
        $notification = $this->employee->user->unreadNotifications()->first();
        $route = route('notifications.read-one', ['id'=>$notification->id]);
        $response = $this->actingAs($this->admin->user)->get($route);
        $response->assertOk();
        $response->assertJson(['success'=>true]);

        $notification->refresh();
        $this->assertNull($notification->read_at);
        $this->assertEquals($count, $this->admin->user->unreadNotifications()->count());
        $this->assertEquals(1, $this->employee->user->unreadNotifications()->count());
    }
}
