<?php

namespace Tests\Feature;

use App\Models\Department;
use App\Models\Employee;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Arr;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;

class ProfileTest extends TestCase
{

    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->index_route = route('profile.index');
        $this->update_route = route('profile.update');
    }

    /** @test */
    public function a_guest_is_redirected_to_login()
    {
        $this->get($this->index_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function a_user_can_see_his_profile()
    {
        $employee = factory(Employee::class)->create();
        $user = $employee->user;
        $response = $this->actingAs($user)->get($this->index_route);

        $response->assertOk();
        $response->assertViewIs('profile.index');

        $user_from_view = $this->getDataFromResponse($response, 'user');

        $this->assertNotNull($user_from_view);
        $this->assertEquals($user->id, $user_from_view->id);
    }

    /** @test */
    public function a_guest_cannot_edit_profile()
    {
        $this->patch($this->update_route)->assertRedirect(route('login'));
    }

    /** @test */
    public function a_user_can_edit_his_profile()
    {
        $employee = factory(Employee::class)->create();
        $user = $employee->user;
        $old_user = clone $user;
        $response = $this->actingAs($user)->patch($this->update_route, $this->data());

        $response->assertSessionHasNoErrors();
        $user->refresh();

        $data = $this->data();
        $this->assertUserData($user, $data);
        $this->assertNotEquals($old_user->profile_pic, $user->profile_pic);
        $response->assertRedirect($this->index_route);
        $response->assertSessionHas('success');
    }

    /** @test */
    public function a_user_cannot_edit_his_profile_with_invalid_name()
    {
        $employee = factory(Employee::class)->create();
        $user = $employee->user;
        $data_sets = [];
        $data_sets[] = array_merge($this->data(), ['name' => '']);
        $data_sets[] = array_merge($this->data(), ['name' => 'ahm']);//min 4
        foreach($data_sets as $data_set){
            $response = $this->actingAs($user)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('name');
            $this->assertOldInput(Arr::except($data_set, ['name']));
            $user->refresh();
            $this->assertNotEquals($data_set['name'], $user->name);
        }
    }

    /** @test */
    public function a_user_cannot_edit_his_profile_with_invalid_email()
    {
        $employee = factory(Employee::class)->create();
        $user = $employee->user;

        $existing_employee = factory(Employee::class)->create();
        $existing_user = $existing_employee->user;

        $data_sets = [];
        $data_sets[] = array_merge($this->data(), ['email' => '']);
        $data_sets[] = array_merge($this->data(), ['email' => 'invalidEmailFormat']);
        $data_sets[] = array_merge($this->data(), ['email' => $existing_user->email]);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($user)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('email');
            if (empty($data_set['email'])) {
                $this->assertOldInput(Arr::except($data_set, ['email']));
            } else {
                $this->assertOldInput($data_set);
            }

            $user->refresh();
            $this->assertNotEquals($data_set['email'], $user->email);
        }
    }

    /** @test */
    public function a_user_cannot_edit_his_profile_with_invalid_phone()
    {
        $employee = factory(Employee::class)->create();
        $user = $employee->user;

        $data_sets = [];
        $data_sets[] = array_merge($this->data(), ['phone' => '']);
        $data_sets[] = array_merge($this->data(), ['phone' => '0102306834']);
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($user)->patch($this->update_route, $data_set);

            $response->assertSessionHasErrors('phone');
            if (empty($data_set['phone'])) {
                $this->assertOldInput(Arr::except($data_set, ['phone']));
            } else {
                $this->assertOldInput($data_set);
            }

            $user->refresh();
            $this->assertNotEquals($data_set['phone'], $user->phone);
        }
    }

    /** @test */
    public function a_user_cannot_edit_his_profile_with_invalid_password()
    {
        $employee = factory(Employee::class)->create();
        $user = $employee->user;
        $old_password = $user->password;

        $data_sets = [];
        $data_sets[] = array_merge($this->data(), ['password' => '', 'password_confirmation'=>'']);//allowed -> if sent empty -> don't update password
        $data_sets[] = array_merge($this->data(), ['password' => 'aaa', 'password_confirmation'=>'bbb']);//confirmation different
        $data_sets[] = array_merge($this->data(), ['password' => '1234567', 'password_confirmation'=>'1234567']);//less than min
        $data_sets[] = array_merge($this->data(), ['password' => '12345678', 'password_confirmation'=>'12345678']);//no letters, special
        $data_sets[] = array_merge($this->data(), ['password' => 'Abcdefgh', 'password_confirmation'=>'Abcdefgh']);//no numbers, special
        $data_sets[] = array_merge($this->data(), ['password' => 'aBCDEFGH', 'password_confirmation'=>'aBCDEFGH']);//no numbers, special
        $data_sets[] = array_merge($this->data(), ['password' => 'aBCDEFGH1', 'password_confirmation'=>'aBCDEFGH1']);//no specials
        $data_sets[] = array_merge($this->data(), ['password' => 'aBCDEFGH-', 'password_confirmation'=>'aBCDEFGH-']);//no numbers

        $errors = [];
        foreach ($data_sets as $data_set) {
            $response = $this->actingAs($user)->patch($this->update_route, $data_set);

            // only if we sent non empty password
            // if empty password sent -> we don't expect any errors
            if($data_set['password']){
                $response->assertSessionHasErrors('password');
                $this->assertOldInput(Arr::except($data_set, ['password']));
            }

            $user->refresh();
            $this->assertEquals($old_password, $user->password);
        }
    }

    /** @test */
    public function a_user_cannot_edit_his_profile_with_invalid_profile_pic()
    {
        $employee = factory(Employee::class)->create();
        $user = $employee->user;
        $old_pic = $user->profile_pic;

        $data_sets = [];
        $data_sets[] = Arr::except($this->data(), ['profile_pic']); //without pic
        $data_sets[] = array_merge($this->data(), ['profile_pic' => UploadedFile::fake()->image('PicFromProfileTest.txt')]);//with invalid format
        foreach($data_sets as $data_set){
            $response = $this->actingAs($user)->patch($this->update_route, $data_set);

            //expect error if profile_pic sent with invalid format
            if(isset($data_set['profile_pic'])){
                $response->assertSessionHasErrors('profile_pic');
                $this->assertOldInput(Arr::except($data_set, ['profile_pic']));
            }

            $this->assertEquals($old_pic, $user->profile_pic);
        }
    }



    private function data()
    {
        return [
            'name' => 'Ahmed Sabbagh',
            'email' => 'ahmedsabbagh@gmail.com',
            'phone' => '01023068346',
            'password' => '12345Aa_',
            'password_confirmation' => '12345Aa_',
            'profile_pic' => UploadedFile::fake()->image('PicFromProfileTest.jpg')
        ];
    }

    private function assertUserData($user, $data = [])
    {
        if (!$data) {
            $data = $this->data();
        }
        foreach ($data as $key => $value) {
            if ($key == 'password' || $key == 'password_confirmation') {
                $this->assertTrue(Hash::check($value, $user->password));
            } elseif ($key != 'profile_pic') {
                $this->assertEquals($value, $user->{$key});
            }
        }
    }

    protected function assertOldInput($data)
    {
        foreach ($data as $key => $value) {
            if (!in_array($key, ['password', 'password_confirmation', 'profile_pic'])) {
                $this->assertTrue(session()->hasOldInput($key));
            }
        }
    }


}
